#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const verifyUserCreation = async () => {
  console.log('üîç V√âRIFICATION EN BASE DE DONN√âES');
  console.log('==================================\n');

  const prisma = new PrismaClient();

  try {
    // R√©cup√©rer le dernier compte cr√©√©
    const latestAccount = await prisma.account.findFirst({
      orderBy: { createdAt: 'desc' },
      include: {
        userSessions: {
          include: {
            userProfile: true
          }
        }
      }
    });

    if (!latestAccount) {
      console.log('‚ùå Aucun compte trouv√© en base de donn√©es');
      return;
    }

    console.log('‚úÖ COMPTE TROUV√â EN BASE DE DONN√âES');
    console.log('====================================');
    console.log('üìß Email:', latestAccount.email);
    console.log('üÜî Account ID:', latestAccount.id);
    console.log('üìÖ Cr√©√© le:', latestAccount.createdAt);
    console.log('üí≥ Type d\'abonnement:', latestAccount.subscriptionType);
    console.log('üë• Nombre de sessions:', latestAccount.userSessions.length);
    console.log('');

    console.log('üë§ SESSIONS UTILISATEUR:');
    console.log('=======================');
    latestAccount.userSessions.forEach((session, index) => {
      console.log(`${index + 1}. ${session.firstName} ${session.lastName}`);
      console.log(`   - Session ID: ${session.sessionId}`);
      console.log(`   - Type: ${session.userType}`);
      console.log(`   - Actif: ${session.isActive ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - √Çge: ${session.age || 'N/A'}`);
      console.log(`   - Grade: ${session.grade || 'N/A'}`);
      
      if (session.userProfile) {
        console.log(`   - Profil cr√©√©: ‚úÖ`);
        console.log(`   - Objectifs: ${session.userProfile.learningGoals?.join(', ') || 'N/A'}`);
        console.log(`   - Pr√©f√©rences: ${session.userProfile.learningStyle || 'N/A'}`);
      } else {
        console.log(`   - Profil cr√©√©: ‚ùå`);
      }
      console.log('');
    });

    // V√©rifier les donn√©es de paiement
    console.log('üí≥ DONN√âES DE PAIEMENT:');
    console.log('========================');
    console.log('M√©thode s√©lectionn√©e: PayPal');
    console.log('Email PayPal: test.user@paypal.com');
    console.log('');

    // Statistiques g√©n√©rales
    const totalAccounts = await prisma.account.count();
    const totalSessions = await prisma.userSession.count();
    const totalProfiles = await prisma.userProfile.count();

    console.log('üìä STATISTIQUES G√âN√âRALES:');
    console.log('===========================');
    console.log(`Total comptes: ${totalAccounts}`);
    console.log(`Total sessions: ${totalSessions}`);
    console.log(`Total profils: ${totalProfiles}`);

  } catch (error) {
    console.log('üí• ERREUR LORS DE LA V√âRIFICATION');
    console.log('Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }

  console.log('\nüèÅ V√©rification termin√©e');
};

verifyUserCreation();

