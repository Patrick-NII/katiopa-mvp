// Script de seed pour les plan seats
// Mappe les abonnements existants vers les nouveaux plans
// Minimal-diff: ajout-only, sans casser l'existant

import { PrismaClient } from '@prisma/client';
import { seatsForPlan, mapSubscriptionTypeToPlan } from '../domain/plan/planPolicy';

const prisma = new PrismaClient();

/**
 * D√©termine le nombre maximum d'enfants selon le type d'abonnement
 */
function seatsForSubscriptionType(type: "FREE" | "PRO" | "PRO_PLUS" | "ENTERPRISE"): number {
  switch (type) {
    case "FREE": return 1;
    case "PRO": return 2;
    case "PRO_PLUS": return 4;
    case "ENTERPRISE": return 9999; // illimit√© pratique
    default: return 1;
  }
}

/**
 * Met √† jour ou cr√©e les plan seats pour tous les comptes existants
 */
export async function seedPlanSeats(): Promise<void> {
  try {
    console.log('üîÑ D√©but du seed des plan seats...');
    
    // R√©cup√©ration de tous les comptes existants
    const accounts = await prisma.account.findMany({
      select: {
        id: true,
        email: true,
        subscriptionType: true,
        plan: true
      }
    });
    
    console.log(`üìä ${accounts.length} comptes trouv√©s pour le seed des plan seats`);
    
    let createdCount = 0;
    let updatedCount = 0;
    
    for (const account of accounts) {
      try {
        // D√©termination du nombre maximum d'enfants
        const maxChildren = seatsForSubscriptionType(account.subscriptionType as any);
        
        // Mise √† jour du plan si n√©cessaire
        if (!account.plan) {
          const newPlan = mapSubscriptionTypeToPlan(account.subscriptionType);
          await prisma.account.update({
            where: { id: account.id },
            data: { plan: newPlan }
          });
          console.log(`‚úÖ Plan mis √† jour pour ${account.email}: ${account.subscriptionType} ‚Üí ${newPlan}`);
        }
        
        // Cr√©ation ou mise √† jour du plan seat
        const planSeat = await prisma.planSeat.upsert({
          where: { accountId: account.id },
          update: { 
            maxChildren,
            // Ajout de logs pour le debug
            account: {
              update: {
                plan: account.plan || mapSubscriptionTypeToPlan(account.subscriptionType)
              }
            }
          },
          create: { 
            accountId: account.id, 
            maxChildren 
          },
        });
        
        if (planSeat) {
          if (planSeat.maxChildren === maxChildren) {
            updatedCount++;
          } else {
            createdCount++;
          }
        }
        
        console.log(`‚úÖ Plan seat pour ${account.email}: ${maxChildren} enfants max`);
        
      } catch (error) {
        console.error(`‚ùå Erreur lors du seed du plan seat pour ${account.email}:`, error);
        // Continue avec les autres comptes
      }
    }
    
    console.log(`üéâ Seed des plan seats termin√©:`);
    console.log(`   - Cr√©√©s: ${createdCount}`);
    console.log(`   - Mis √† jour: ${updatedCount}`);
    console.log(`   - Total: ${accounts.length}`);
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du seed des plan seats:', error);
    throw error;
  }
}

/**
 * V√©rifie l'√©tat des plan seats apr√®s le seed
 */
export async function verifyPlanSeats(): Promise<void> {
  try {
    console.log('üîç V√©rification des plan seats...');
    
    const planSeats = await prisma.planSeat.findMany({
      include: {
        account: {
          select: {
            email: true,
            subscriptionType: true,
            plan: true
          }
        }
      }
    });
    
    console.log(`üìä ${planSeats.length} plan seats trouv√©s:`);
    
    for (const seat of planSeats) {
      const expectedSeats = seatsForSubscriptionType(seat.account.subscriptionType as any);
      const status = seat.maxChildren === expectedSeats ? '‚úÖ' : '‚ö†Ô∏è';
      
      console.log(`${status} ${seat.account.email}:`);
      console.log(`   - Plan: ${seat.account.plan} (${seat.account.subscriptionType})`);
      console.log(`   - Si√®ges: ${seat.maxChildren}/${expectedSeats}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des plan seats:', error);
  }
}

/**
 * Fonction principale pour ex√©cuter le seed
 */
async function main() {
  try {
    await seedPlanSeats();
    await verifyPlanSeats();
    
    console.log('üéØ Seed des plan seats termin√© avec succ√®s !');
    
  } catch (error) {
    console.error('üí• Erreur fatale lors du seed des plan seats:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cution si le script est appel√© directement
// Ex√©cution si le script est appel√© directement (compat ESM)
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
if (typeof require !== 'undefined' && typeof module !== 'undefined' && require.main === module) {
  main();
}
