import { ChatOpenAI } from '@langchain/openai';
import { PrismaClient } from '@prisma/client';
import { PromptTemplate } from '@langchain/core/prompts';
import { StringOutputParser } from '@langchain/core/output_parsers';
import { RunnableSequence } from '@langchain/core/runnables';
import { OpenAIEmbeddings } from '@langchain/openai';
import { MemoryVectorStore } from '@langchain/community/vectorstores/memory';
import { Document } from '@langchain/core/documents';

const prisma = new PrismaClient();

// Configuration des mod√®les OpenAI
const llm = new ChatOpenAI({
  modelName: 'gpt-4o-mini',
  temperature: 0.7,
  openAIApiKey: process.env.OPENAI_API_KEY,
});

const embeddings = new OpenAIEmbeddings({
  openAIApiKey: process.env.OPENAI_API_KEY,
});

// Service RAG avanc√©
export class RAGService {
  private vectorStore: MemoryVectorStore | null = null;
  private isInitialized = false;

  // Initialisation du vector store avec les donn√©es existantes
  async initializeVectorStore(): Promise<void> {
    if (this.isInitialized) return;

    try {
      console.log('üîÑ Initialisation du vector store RAG...');

      // R√©cup√©ration de toutes les conversations existantes
      const conversations = await prisma.conversation.findMany({
        select: {
          id: true,
          message: true,
          response: true,
          focus: true,
          context: true,
          createdAt: true,
          userSession: {
            select: {
              firstName: true,
              userType: true,
              age: true,
              grade: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });

      // Cr√©ation des documents pour le vector store
      const documents: Document[] = [];
      
      conversations.forEach(conv => {
        // Document pour la question
        documents.push(new Document({
          pageContent: `Question: ${conv.message}\nContexte: ${conv.focus || 'G√©n√©ral'}\nUtilisateur: ${conv.userSession?.firstName} (${conv.userSession?.userType}, ${conv.userSession?.age || 'N/A'} ans, ${conv.userSession?.grade || 'N/A'})`,
          metadata: {
            type: 'question',
            conversationId: conv.id,
            focus: conv.focus,
            userType: conv.userSession?.userType,
            timestamp: conv.createdAt
          }
        }));

        // Document pour la r√©ponse
        documents.push(new Document({
          pageContent: `R√©ponse: ${conv.response}\nQuestion associ√©e: ${conv.message}\nContexte: ${conv.focus || 'G√©n√©ral'}`,
          metadata: {
            type: 'response',
            conversationId: conv.id,
            focus: conv.focus,
            userType: conv.userSession?.userType,
            timestamp: conv.createdAt
          }
        }));
      });

      // Ajout de documents de connaissances g√©n√©rales sur Katiopa
      const knowledgeDocuments = this.createKnowledgeDocuments();
      documents.push(...knowledgeDocuments);

      // Cr√©ation du vector store
      this.vectorStore = await MemoryVectorStore.fromDocuments(documents, embeddings);
      
      console.log(`‚úÖ Vector store initialis√© avec ${documents.length} documents`);
      this.isInitialized = true;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du vector store:', error);
      throw error;
    }
  }

  // Cr√©ation de documents de connaissances sur Katiopa
  private createKnowledgeDocuments(): Document[] {
    const knowledge = [
      {
        content: `Katiopa est une plateforme d'apprentissage IA innovante qui combine:
        - Intelligence artificielle avanc√©e pour l'√©ducation personnalis√©e
        - Gestion des sessions enfants/parents avec suivi des progr√®s
        - Domaines d'apprentissage: Math√©matiques, Programmation, Lecture, Sciences, IA & Logique
        - Types d'abonnements: FREE (1 session), PRO (2 sessions), PRO_PLUS (4 sessions)
        - √âvaluation continue des progr√®s avec recommandations personnalis√©es`,
        metadata: { type: 'knowledge', category: 'platform_overview' }
      },
      {
        content: `M√©thodes p√©dagogiques utilis√©es par Katiopa:
        - Approche Montessori: Apprentissage par l'exp√©rience et l'exploration
        - M√©thode Freinet: P√©dagogie active et coop√©rative
        - Neurosciences cognitives: Adaptation au d√©veloppement du cerveau
        - Gamification: Apprentissage ludique et engageant
        - Personnalisation: Adaptation au rythme et style de chaque enfant`,
        metadata: { type: 'knowledge', category: 'pedagogy' }
      },
      {
        content: `Types d'utilisateurs et leurs besoins:
        - ENFANTS: Apprentissage ludique, encouragements, explications simples
        - PARENTS: Suivi des progr√®s, recommandations, conseils √©ducatifs
        - ENSEIGNANTS: Outils p√©dagogiques, analyse des performances
        - ADMIN: Gestion de la plateforme et des utilisateurs`,
        metadata: { type: 'knowledge', category: 'user_types' }
      },
      {
        content: `Domaines d'apprentissage et leurs sp√©cificit√©s:
        - Math√©matiques: Niveaux CP √† CM2, progression logique, exercices pratiques
        - Programmation: Logique, algorithmes, cr√©ativit√©, r√©solution de probl√®mes
        - Lecture: Compr√©hension, vocabulaire, fluidit√©, plaisir de lire
        - Sciences: Exp√©rimentation, observation, raisonnement scientifique
        - IA & Logique: Pens√©e computationnelle, r√©solution de probl√®mes complexes`,
        metadata: { type: 'knowledge', category: 'learning_domains' }
      }
    ];

    return knowledge.map(k => new Document({
      pageContent: k.content,
      metadata: k.metadata
    }));
  }

  // Recherche vectorielle pour enrichir le contexte
  async searchRelevantContext(
    query: string,
    focus?: string,
    userType?: string,
    limit: number = 5
  ): Promise<Document[]> {
    if (!this.vectorStore) {
      await this.initializeVectorStore();
    }

    try {
      // Recherche avec filtres contextuels
      let searchQuery = query;
      
      // Ajout du focus si sp√©cifi√©
      if (focus) {
        searchQuery += ` ${focus} domaine apprentissage`;
      }

      // Ajout du type d'utilisateur si sp√©cifi√©
      if (userType) {
        searchQuery += ` ${userType} utilisateur`;
      }

      // Recherche vectorielle
      const results = await this.vectorStore!.similaritySearch(searchQuery, limit);

      console.log(`üîç Recherche RAG: ${results.length} documents pertinents trouv√©s`);
      return results;

    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche RAG:', error);
      return [];
    }
  }

  // G√©n√©ration de r√©ponse enrichie avec RAG
  async generateRAGResponse(
    question: string,
    userType: string,
    firstName: string,
    subscriptionType: string,
    focus?: string,
    userSessionId?: string,
    accountId?: string
  ): Promise<string> {
    try {
      // Recherche de contexte pertinent
      const relevantDocs = await this.searchRelevantContext(question, focus, userType);

      // Cr√©ation du prompt enrichi avec RAG
      const ragPrompt = this.createRAGPrompt(userType, firstName, subscriptionType, relevantDocs);

      // Cha√Æne de traitement RAG
      const chain = RunnableSequence.from([
        ragPrompt,
        llm,
        new StringOutputParser(),
      ]);

      // Ex√©cution avec contexte enrichi
      const response = await chain.invoke({
        question,
        focus: focus || 'G√©n√©ral',
        relevantContext: relevantDocs.map(doc => doc.pageContent).join('\n\n'),
        userType,
        subscriptionType
      });

      // Sauvegarde de la conversation enrichie
      if (userSessionId && accountId) {
        await this.saveEnrichedConversation(
          userSessionId,
          accountId,
          question,
          response,
          focus,
          userType,
          subscriptionType,
          relevantDocs
        );
      }

      return response;

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration RAG:', error);
      return `D√©sol√©, je rencontre une difficult√© technique. Veuillez r√©essayer dans quelques instants. Erreur: ${error.message}`;
    }
  }

  // Cr√©ation du prompt RAG enrichi
  private createRAGPrompt(
    userType: string,
    firstName: string,
    subscriptionType: string,
    relevantDocs: Document[]
  ): PromptTemplate {
    const contextExamples = relevantDocs
      .map((doc, index) => `Exemple ${index + 1}:\n${doc.pageContent}`)
      .join('\n\n');

    return PromptTemplate.fromTemplate(`
Tu es l'Assistant IA Katiopa, une √©quipe p√©dagogique virtuelle d'excellence repr√©sentant une √©cole r√©put√©e pour former les meilleurs cerveaux.

CONTEXTE UTILISATEUR:
- Type: ${userType}
- Pr√©nom: ${firstName}
- Abonnement: ${subscriptionType}

TON R√îLE:
Tu es un expert p√©dagogique de niveau international avec:
- Expertise en neurosciences cognitives
- M√©thodes d'apprentissage √©prouv√©es (Montessori, Freinet, etc.)
- Capacit√© d'analyse fine des progr√®s
- Anticipation des besoins √©ducatifs
- √âvaluation continue et personnalis√©e

CONTEXTE PERTINENT TROUV√â:
${contextExamples}

MISSION:
1. Utilise le contexte pertinent ci-dessus pour enrichir ta r√©ponse
2. Analyse les donn√©es de l'utilisateur avec pr√©cision
3. Fournis des insights p√©dagogiques de qualit√©
4. Anticipe les besoins d'apprentissage
5. Donne des recommandations personnalis√©es
6. Cr√©e un lien √©motionnel et motivant

STYLE DE COMMUNICATION:
- ${userType === 'PARENT' ? 'Professionnel mais chaleureux, rassurant, orient√© r√©sultats' : 'Encourageant, adapt√© √† l\'√¢ge, ludique et motivant'}
- Utilise le pr√©nom de l'utilisateur
- Sois pr√©cis et concret dans tes analyses
- Donne des exemples pratiques
- Reste toujours positif et constructif
- R√©f√®re-toi au contexte pertinent quand c'est appropri√©

QUESTION DE L'UTILISATEUR: {question}
MATI√àRE DE FOCUS: {focus}

R√âPONSE ENRICHIE:
`);
  }

  // Sauvegarde de conversation enrichie avec m√©tadonn√©es RAG
  private async saveEnrichedConversation(
    userSessionId: string,
    accountId: string,
    message: string,
    response: string,
    focus?: string,
    userType?: string,
    subscriptionType?: string,
    relevantDocs?: Document[]
  ): Promise<void> {
    try {
      const context = {
        userType,
        subscriptionType,
        timestamp: new Date().toISOString(),
        model: 'gpt-4o-mini',
        focus,
        ragEnabled: true,
        relevantDocumentsCount: relevantDocs?.length || 0
      };

      const metadata = {
        messageLength: message.length,
        responseLength: response.length,
        estimatedTokens: Math.ceil((message.length + response.length) / 4),
        processingTime: new Date().toISOString(),
        ragDocuments: relevantDocs?.map(doc => ({
          content: doc.pageContent.substring(0, 100) + '...',
          metadata: doc.metadata
        })) || []
      };

      await prisma.conversation.create({
        data: {
          userSessionId,
          accountId,
          message,
          response,
          focus,
          context,
          metadata
        }
      });

      console.log('‚úÖ Conversation RAG enrichie sauvegard√©e avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de la conversation RAG:', error);
      throw error;
    }
  }

  // Mise √† jour du vector store avec de nouvelles conversations
  async updateVectorStore(newConversation: any): Promise<void> {
    if (!this.vectorStore) {
      await this.initializeVectorStore();
    }

    try {
      // Ajout des nouveaux documents
      const newDocs = [
        new Document({
          pageContent: `Question: ${newConversation.message}\nContexte: ${newConversation.focus || 'G√©n√©ral'}`,
          metadata: {
            type: 'question',
            conversationId: newConversation.id,
            focus: newConversation.focus,
            timestamp: newConversation.createdAt
          }
        }),
        new Document({
          pageContent: `R√©ponse: ${newConversation.response}\nQuestion associ√©e: ${newConversation.message}`,
          metadata: {
            type: 'response',
            conversationId: newConversation.id,
            focus: newConversation.focus,
            timestamp: newConversation.createdAt
          }
        })
      ];

      await this.vectorStore!.addDocuments(newDocs);
      console.log('‚úÖ Vector store mis √† jour avec la nouvelle conversation');

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du vector store:', error);
    }
  }

  // R√©initialisation du vector store (pour les tests ou mises √† jour majeures)
  async resetVectorStore(): Promise<void> {
    this.vectorStore = null;
    this.isInitialized = false;
    console.log('üîÑ Vector store r√©initialis√©');
  }
}

export default new RAGService();

