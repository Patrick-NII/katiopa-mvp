// Service LLM simplifi√© sans LangChain
export class LLMService {
  private isInitialized = false;

  // Initialisation du service
  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      console.log('üîÑ Initialisation du service LLM...');
      
      // Test de connexion √† OpenAI
      if (!process.env.OPENAI_API_KEY) {
        throw new Error('OPENAI_API_KEY non configur√©e');
      }
      
      console.log('‚úÖ Service LLM initialis√© avec succ√®s');
      this.isInitialized = true;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du service LLM:', error);
      throw error;
    }
  }

  // G√©n√©ration de r√©ponse simple avec OpenAI
  async generateResponse(
    question: string,
    userType: string,
    firstName: string,
    focus?: string
  ): Promise<string> {
    try {
      const prompt = this.createPrompt(userType, firstName, focus);
      
      // Appel direct √† l'API OpenAI
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: prompt
            },
            {
              role: 'user',
              content: question
            }
          ],
          temperature: 0.7,
          max_tokens: 500
        })
      });

      if (!response.ok) {
        throw new Error(`Erreur OpenAI: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de r√©ponse:', error);
      return `D√©sol√©, je rencontre une difficult√© technique. Veuillez r√©essayer dans quelques instants.`;
    }
  }

  // Cr√©ation du prompt
  private createPrompt(userType: string, firstName: string, focus?: string): string {
    return `Tu es l'Assistant IA Katiopa, un expert p√©dagogique de niveau international.

CONTEXTE UTILISATEUR:
- Type: ${userType}
- Pr√©nom: ${firstName}
- Focus: ${focus || 'G√©n√©ral'}

TON R√îLE:
Tu es un expert p√©dagogique avec:
- Expertise en neurosciences cognitives
- M√©thodes d'apprentissage √©prouv√©es (Montessori, Freinet, etc.)
- Capacit√© d'analyse fine des progr√®s
- Anticipation des besoins √©ducatifs

STYLE DE COMMUNICATION:
- ${userType === 'PARENT' ? 'Professionnel mais chaleureux, rassurant, orient√© r√©sultats' : 'Encourageant, adapt√© √† l\'√¢ge, ludique et motivant'}
- Utilise le pr√©nom de l'utilisateur
- Sois pr√©cis et concret dans tes analyses
- Donne des exemples pratiques
- Reste toujours positif et constructif

R√©ponds de mani√®re claire et adapt√©e au type d'utilisateur.`;
  }

  // R√©initialisation du service
  async reset(): Promise<void> {
    this.isInitialized = false;
    console.log('üîÑ Service LLM r√©initialis√©');
  }
}

export default new LLMService();
