import fetch from 'node-fetch';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

class RealTimeConnectionTracker {
  constructor() {
    this.activeConnections = new Map();
    this.updateInterval = null;
  }

  // D√©marrer le tracking en temps r√©el
  startRealTimeTracking() {
    console.log('üîÑ D√©marrage du tracking en temps r√©el...');
    
    // Mettre √† jour toutes les 30 secondes en production
    this.updateInterval = setInterval(async () => {
      await this.updateAllActiveSessions();
    }, 30000); // 30 secondes
  }

  // Arr√™ter le tracking en temps r√©el
  stopRealTimeTracking() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
      console.log('‚èπÔ∏è Arr√™t du tracking en temps r√©el');
    }
  }

  // Mettre √† jour toutes les sessions actives
  async updateAllActiveSessions() {
    try {
      const activeSessions = await prisma.userSession.findMany({
        where: {
          currentSessionStartTime: {
            not: null
          }
        },
        select: {
          id: true,
          firstName: true,
          lastName: true,
          currentSessionStartTime: true,
          totalConnectionDurationMs: true
        }
      });

      const now = new Date();
      
      for (const session of activeSessions) {
        const sessionStart = new Date(session.currentSessionStartTime);
        const timeDiff = now.getTime() - sessionStart.getTime();
        
        // Si la session a plus de 30 minutes, la consid√©rer comme inactive
        if (timeDiff > 30 * 60 * 1000) {
          await this.endSession(session.id);
          console.log(`‚è∞ Session expir√©e pour ${session.firstName} ${session.lastName}`);
        } else {
          // Mettre √† jour le temps total de connexion
          const currentTotalMs = Number(session.totalConnectionDurationMs || 0);
          const newTotalMs = currentTotalMs + 30000; // Ajouter 30 secondes
          
          await prisma.userSession.update({
            where: { id: session.id },
            data: {
              totalConnectionDurationMs: newTotalMs
            }
          });
          
          const totalMinutes = Math.floor(newTotalMs / 60000);
          console.log(`‚è±Ô∏è ${session.firstName}: +30s (total: ${totalMinutes}min)`);
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour sessions actives:', error);
    }
  }

  // D√©marrer une session
  async startSession(userId) {
    try {
      const now = new Date();
      
      await prisma.userSession.update({
        where: { id: userId },
        data: {
          lastLoginAt: now,
          currentSessionStartTime: now
        }
      });

      console.log(`üü¢ Session d√©marr√©e pour l'utilisateur ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur d√©marrage session:', error);
      return false;
    }
  }

  // Terminer une session
  async endSession(userId) {
    try {
      const userSession = await prisma.userSession.findUnique({
        where: { id: userId },
        select: {
          currentSessionStartTime: true,
          totalConnectionDurationMs: true
        }
      });

      if (userSession?.currentSessionStartTime) {
        const now = new Date();
        const sessionStart = new Date(userSession.currentSessionStartTime);
        const sessionDuration = now.getTime() - sessionStart.getTime();
        const currentTotalMs = Number(userSession.totalConnectionDurationMs || 0);
        
        await prisma.userSession.update({
          where: { id: userId },
          data: {
            currentSessionStartTime: null,
            totalConnectionDurationMs: currentTotalMs + sessionDuration
          }
        });

        console.log(`üî¥ Session termin√©e (dur√©e: ${Math.floor(sessionDuration / 60000)}min)`);
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur fin de session:', error);
      return false;
    }
  }

  // Obtenir les statistiques de connexion en temps r√©el
  async getRealTimeStats(userId) {
    try {
      const userSession = await prisma.userSession.findUnique({
        where: { id: userId },
        select: {
          id: true,
          firstName: true,
          lastName: true,
          userType: true,
          lastLoginAt: true,
          currentSessionStartTime: true,
          totalConnectionDurationMs: true,
          isActive: true
        }
      });

      if (!userSession) return null;

      const now = new Date();
      let isCurrentlyOnline = false;
      let currentSessionDuration = 0;

      if (userSession.currentSessionStartTime) {
        const sessionStart = new Date(userSession.currentSessionStartTime);
        const timeDiff = now.getTime() - sessionStart.getTime();
        isCurrentlyOnline = timeDiff < 30 * 60 * 1000;
        currentSessionDuration = Math.floor(timeDiff / (1000 * 60));
      }

      const totalHours = Math.floor(Number(userSession.totalConnectionDurationMs || 0) / (1000 * 60 * 60));
      const totalMinutes = Math.floor((Number(userSession.totalConnectionDurationMs || 0) % (1000 * 60 * 60)) / (1000 * 60));

      return {
        id: userSession.id,
        name: `${userSession.firstName} ${userSession.lastName}`,
        userType: userSession.userType,
        isCurrentlyOnline,
        lastLoginAt: userSession.lastLoginAt,
        currentSessionStartTime: userSession.currentSessionStartTime,
        currentSessionDuration,
        totalConnectionDurationMs: Number(userSession.totalConnectionDurationMs || 0),
        isActive: userSession.isActive,
        totalHours,
        totalMinutes
      };
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statut:', error);
      return null;
    }
  }

  // R√©cup√©rer le statut de connexion de tous les enfants d'un parent
  async getChildrenConnectionStatus(parentAccountId) {
    try {
      const children = await prisma.userSession.findMany({
        where: {
          accountId: parentAccountId,
          userType: 'CHILD',
          isActive: true
        },
        select: {
          id: true,
          firstName: true,
          lastName: true,
          age: true,
          lastLoginAt: true,
          currentSessionStartTime: true,
          totalConnectionDurationMs: true,
          isActive: true
        }
      });

      const now = new Date();
      const childrenStatus = children.map(child => {
        let isCurrentlyOnline = false;
        let currentSessionDuration = 0;

        if (child.currentSessionStartTime) {
          const sessionStart = new Date(child.currentSessionStartTime);
          const timeDiff = now.getTime() - sessionStart.getTime();
          isCurrentlyOnline = timeDiff < 30 * 60 * 1000;
          currentSessionDuration = Math.floor(timeDiff / (1000 * 60));
        }

        const totalHours = Math.floor(Number(child.totalConnectionDurationMs || 0) / (1000 * 60 * 60));
        const totalMinutes = Math.floor((Number(child.totalConnectionDurationMs || 0) % (1000 * 60 * 60)) / (1000 * 60));

        return {
          id: child.id,
          name: `${child.firstName} ${child.lastName}`,
          age: child.age,
          isCurrentlyOnline,
          lastLoginAt: child.lastLoginAt,
          currentSessionStartTime: child.currentSessionStartTime,
          currentSessionDuration,
          totalConnectionDurationMs: Number(child.totalConnectionDurationMs || 0),
          isActive: child.isActive,
          totalHours,
          totalMinutes
        };
      });

      return childrenStatus;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statut enfants:', error);
      return [];
    }
  }
}

// Test de l'int√©gration avec l'API chat en temps r√©el
async function testRealTimeChatIntegration() {
  console.log('üîÑ Test de l\'int√©gration chat en temps r√©el...\n');

  const tracker = new RealTimeConnectionTracker();

  // 1. D√©marrer une session pour Emma
  console.log('üë∂ D√©marrage session Emma...');
  await tracker.startSession('cmf2yznwx000445g0k3buwfdr');
  
  // 2. D√©marrer le tracking en temps r√©el
  tracker.startRealTimeTracking();
  
  // 3. Test avec Marie demandant le statut en temps r√©el
  console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Test Marie demandant le statut en temps r√©el...');
  
  const marieLogin = await fetch('http://localhost:4000/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      sessionId: 'parent_01',
      password: 'password123'
    })
  });

  const marieToken = marieLogin.headers.get('set-cookie')?.split('authToken=')[1]?.split(';')[0];
  
  // R√©cup√©rer le statut des enfants en temps r√©el
  const childrenStatus = await tracker.getChildrenConnectionStatus('cmf2yznqn000045g0ilo29ka2');
  console.log('üìä Statut enfants en temps r√©el:', JSON.stringify(childrenStatus, null, 2));
  
  // Test de l'API chat
  const marieResponse = await fetch('http://localhost:3000/api/chat', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${marieToken}`
    },
    body: JSON.stringify({
      messages: [{ id: '1', text: 'Depuis combien de temps Emma est-elle connect√©e ?', sender: 'user', timestamp: Date.now() }],
      persona: 'pro',
      lang: 'fr'
    })
  });

  const marieChat = await marieResponse.json();
  console.log('üìù R√©ponse Marie en temps r√©el:', marieChat.text.substring(0, 200) + '...');
  console.log('');

  // 4. Attendre 30 secondes pour voir les mises √† jour
  console.log('‚è±Ô∏è Attente de 30 secondes pour voir les mises √† jour...');
  await new Promise(resolve => setTimeout(resolve, 30000));
  
  // 5. Test √† nouveau apr√®s les mises √† jour
  console.log('üîÑ Test apr√®s mise √† jour en temps r√©el...');
  
  const marieResponse2 = await fetch('http://localhost:3000/api/chat', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${marieToken}`
    },
    body: JSON.stringify({
      messages: [{ id: '1', text: 'Combien d\'heures Emma a-t-elle pass√©es connect√©es au total ?', sender: 'user', timestamp: Date.now() }],
      persona: 'pro',
      lang: 'fr'
    })
  });

  const marieChat2 = await marieResponse2.json();
  console.log('üìù R√©ponse Marie apr√®s mise √† jour:', marieChat2.text.substring(0, 200) + '...');
  console.log('');

  // 6. Terminer la session
  console.log('üî¥ Fin de session Emma...');
  await tracker.endSession('cmf2yznwx000445g0k3buwfdr');
  
  // 7. Test final
  console.log('üéØ Test final...');
  
  const marieResponse3 = await fetch('http://localhost:3000/api/chat', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${marieToken}`
    },
    body: JSON.stringify({
      messages: [{ id: '1', text: 'Emma est-elle encore connect√©e ?', sender: 'user', timestamp: Date.now() }],
      persona: 'pro',
      lang: 'fr'
    })
  });

  const marieChat3 = await marieResponse3.json();
  console.log('üìù R√©ponse finale:', marieChat3.text.substring(0, 200) + '...');
  console.log('');

  // 8. Arr√™ter le tracking
  tracker.stopRealTimeTracking();
  
  console.log('‚úÖ Test termin√© !');
  console.log('');
  console.log('üéØ R√©sum√© de l\'int√©gration temps r√©el:');
  console.log('- ‚úÖ Tracking automatique toutes les 30 secondes');
  console.log('- ‚úÖ Mise √† jour du temps total de connexion');
  console.log('- ‚úÖ Bubix a acc√®s aux informations en temps r√©el');
  console.log('- ‚úÖ D√©tection automatique des sessions expir√©es');
  console.log('- ‚úÖ Calcul pr√©cis des dur√©es de connexion');
}

testRealTimeChatIntegration().catch(console.error);

