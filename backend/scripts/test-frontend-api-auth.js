import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();

// Test avec authentification r√©elle
async function testFrontendAPIWithAuth() {
  console.log('üîç Test de l\'API frontend avec authentification...\n');

  try {
    // 1. R√©cup√©rer un parent de test
    console.log('üë§ R√©cup√©ration d\'un parent de test...');
    
    const parentSession = await prisma.userSession.findFirst({
      where: {
        userType: 'PARENT'
      },
      include: {
        account: true
      }
    });

    if (!parentSession) {
      console.log('‚ùå Aucun parent trouv√©');
      return;
    }

    console.log(`‚úÖ Parent trouv√©: ${parentSession.firstName} ${parentSession.lastName}`);
    console.log(`üÜî Parent ID: ${parentSession.id}`);

    // 2. Cr√©er un token JWT valide
    const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
    const token = jwt.sign(
      {
        userId: parentSession.id,
        accountId: parentSession.accountId,
        email: parentSession.account.email,
        userType: parentSession.userType
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log(`üîê Token JWT cr√©√©: ${token.substring(0, 50)}...`);

    // 3. Tester l'API avec le token valide
    console.log('\nüì° Test de l\'API avec authentification...');
    
    const response = await fetch('http://localhost:3000/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: 'je souhaiterais que Emma passe plus de temps sur CubeMatch'
          }
        ],
        persona: 'pro'
      })
    });

    const data = await response.json();
    
    console.log('üìä R√©ponse de l\'API frontend:');
    console.log(`‚úÖ Status: ${response.status}`);
    console.log(`üìù R√©ponse: ${data.text?.substring(0, 100)}...`);
    console.log(`üé´ Model: ${data.model}`);
    console.log(`üë§ UserInfo: ${data.userInfo?.name}`);
    console.log(`üé´ UserType: ${data.userInfo?.userType}`);
    console.log(`üîí SubscriptionType: ${data.userInfo?.subscriptionType}`);

    // 4. V√©rifier si le prompt a √©t√© sauvegard√©
    console.log('\nüîç V√©rification de la sauvegarde...');
    
    const recentPrompts = await prisma.parentPrompt.findMany({
      where: {
        accountId: parentSession.accountId,
        createdAt: {
          gte: new Date(Date.now() - 2 * 60 * 1000) // Prompts des 2 derni√®res minutes
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 1
    });

    if (recentPrompts.length > 0) {
      const latestPrompt = recentPrompts[0];
      console.log('‚úÖ Prompt sauvegard√© trouv√© !');
      console.log(`üÜî ID: ${latestPrompt.id}`);
      console.log(`üìù Contenu: "${latestPrompt.content}"`);
      console.log(`üéØ Type: ${latestPrompt.promptType}`);
      console.log(`üìä Status: ${latestPrompt.status}`);
      console.log(`üìÖ Date: ${new Date(latestPrompt.createdAt).toLocaleString('fr-FR')}`);
    } else {
      console.log('‚ùå Aucun prompt r√©cent trouv√©');
      console.log('üîç V√©rification des prompts plus anciens...');
      
      const allPrompts = await prisma.parentPrompt.findMany({
        where: {
          accountId: parentSession.accountId
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: 3
      });
      
      console.log(`üìä ${allPrompts.length} prompts trouv√©s au total`);
      allPrompts.forEach((prompt, index) => {
        console.log(`${index + 1}. "${prompt.content.substring(0, 50)}..." - ${new Date(prompt.createdAt).toLocaleString('fr-FR')}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'API frontend:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFrontendAPIWithAuth().catch(console.error);
