import fetch from 'node-fetch';

async function debugChildSession() {
  console.log('üîç Debug de la session enfant...\n');

  // Connexion enfant
  console.log('üîê Connexion en tant qu\'enfant...');
  const loginResponse = await fetch('http://localhost:4000/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      sessionId: 'enfant_01',
      password: 'password123'
    })
  });

  if (!loginResponse.ok) {
    console.error('‚ùå √âchec de la connexion enfant');
    return;
  }

  const loginData = await loginResponse.json();
  const authToken = loginData.token;
  console.log('‚úÖ Connexion r√©ussie');
  console.log('üîë Token re√ßu:', authToken ? authToken.substring(0, 20) + '...' : 'Aucun token');
  console.log('üìã Donn√©es de connexion:', JSON.stringify(loginData, null, 2));
  console.log('');
  
  // R√©cup√©rer le token depuis les cookies
  const cookies = loginResponse.headers.get('set-cookie');
  console.log('üç™ Cookies re√ßus:', cookies);
  
  // Extraire le token du cookie
  let tokenFromCookie = null;
  if (cookies) {
    const authCookie = cookies.split(',').find(cookie => cookie.includes('authToken='));
    if (authCookie) {
      tokenFromCookie = authCookie.split('authToken=')[1]?.split(';')[0];
      console.log('üîë Token extrait du cookie:', tokenFromCookie ? tokenFromCookie.substring(0, 20) + '...' : 'Aucun token');
    }
  }
  
  const finalToken = authToken || tokenFromCookie;
  console.log('üîë Token final utilis√©:', finalToken ? finalToken.substring(0, 20) + '...' : 'Aucun token');
  console.log('');

  // Test de v√©rification d'auth
  console.log('üîç Test de v√©rification d\'authentification...');
  const verifyResponse = await fetch('http://localhost:4000/api/auth/verify', {
    headers: { 
      'Cookie': `authToken=${finalToken}`
    }
  });

  if (verifyResponse.ok) {
    const verifyData = await verifyResponse.json();
    console.log('‚úÖ V√©rification r√©ussie:');
    console.log('   - ID:', verifyData.user?.id);
    console.log('   - Session ID:', verifyData.user?.sessionId);
    console.log('   - Nom:', verifyData.user?.firstName, verifyData.user?.lastName);
    console.log('   - Type:', verifyData.user?.userType);
    console.log('');
  } else {
    console.log('‚ùå √âchec de la v√©rification');
  }

  // Test de chat avec debug
  console.log('üí¨ Test de chat avec debug...');
  const chatResponse = await fetch('http://localhost:3000/api/chat', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Cookie': `authToken=${finalToken}`
    },
    body: JSON.stringify({
      messages: [{ id: '1', text: 'Qui suis-je ?', sender: 'user', timestamp: Date.now() }],
      persona: 'kid',
      lang: 'fr'
    })
  });

  const chatData = await chatResponse.json();
  console.log('üìù R√©ponse chat:', chatData.text);
  console.log('');

  // Test avec question sp√©cifique
  console.log('üéØ Test avec question sp√©cifique...');
  const specificResponse = await fetch('http://localhost:3000/api/chat', {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Cookie': `authToken=${finalToken}`
    },
    body: JSON.stringify({
      messages: [{ id: '2', text: 'Dis-moi mon pr√©nom et mon √¢ge', sender: 'user', timestamp: Date.now() }],
      persona: 'kid',
      lang: 'fr'
    })
  });

  const specificData = await specificResponse.json();
  console.log('üìù R√©ponse sp√©cifique:', specificData.text);

  console.log('\n‚úÖ Debug termin√© !');
}

debugChildSession().catch(console.error);
