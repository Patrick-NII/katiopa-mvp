import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Test simple pour v√©rifier les donn√©es CubeMatch en temps r√©el
async function testCubeMatchRealTime() {
  console.log('üîÑ Test des donn√©es CubeMatch en temps r√©el...\n');

  // 1. R√©cup√©rer les donn√©es CubeMatch de Lucas
  console.log('üìä R√©cup√©ration des donn√©es CubeMatch de Lucas...');
  
  try {
    const lucasCubeMatch = await prisma.$queryRaw`
      SELECT 
        COUNT(*) as totalGames,
        COALESCE(SUM(score), 0) as totalScore,
        COALESCE(AVG(score), 0) as averageScore,
        COALESCE(MAX(score), 0) as bestScore,
        COALESCE(MAX(level), 1) as highestLevel,
        COALESCE(MAX(longest_combo_chain), 0) as bestCombo
      FROM cubematch_scores 
      WHERE user_id = 'cmf2yznx3000c45g0gqjs8844'
    `;

    console.log('üìù Donn√©es CubeMatch Lucas:', {
      totalGames: Number(lucasCubeMatch[0].totalgames),
      totalScore: Number(lucasCubeMatch[0].totalscore),
      averageScore: Number(lucasCubeMatch[0].averagescore),
      bestScore: Number(lucasCubeMatch[0].bestscore),
      highestLevel: Number(lucasCubeMatch[0].highestlevel),
      bestCombo: Number(lucasCubeMatch[0].bestcombo)
    });
    
    // 2. Formater pour l'IA
    const stats = lucasCubeMatch[0];
    const totalGames = Number(stats.totalgames);
    const totalScore = Number(stats.totalscore);
    const highestLevel = Number(stats.highestlevel);
    const bestCombo = Number(stats.bestcombo);
    
    let cubeMatchInfo = `**CubeMatch :** ${totalGames} parties, score total ${totalScore.toLocaleString()}, meilleur score ${stats.bestscore}, niveau max ${highestLevel}, meilleur combo x${bestCombo}.`;
    
    console.log('üí¨ Info CubeMatch format√©e:', cubeMatchInfo);
    
    // 3. R√©cup√©rer les donn√©es par op√©ration
    console.log('\nüìä R√©cup√©ration des donn√©es par op√©ration...');
    
    const cubeMatchOperators = await prisma.$queryRaw`
      SELECT 
        operator,
        COUNT(*) as games,
        COALESCE(AVG(score), 0) as averageScore,
        COALESCE(AVG(accuracy_rate), 0) as averageAccuracy
      FROM cubematch_scores 
      WHERE user_id = 'cmf2yznx3000c45g0gqjs8844'
      GROUP BY operator
      ORDER BY games DESC
    `;

    console.log('üìù Donn√©es par op√©ration:', cubeMatchOperators.map(op => ({
      operator: op.operator,
      games: Number(op.games),
      averageScore: Number(op.averagescore),
      averageAccuracy: Number(op.averageaccuracy)
    })));
    
    // 4. Formater les op√©rations
    if (cubeMatchOperators.length > 0) {
      cubeMatchInfo += ` Op√©rations : `;
      cubeMatchOperators.forEach((op, i) => {
        const opName = { 'ADD': 'Add', 'SUB': 'Sous', 'MUL': 'Mult', 'DIV': 'Div' }[op.operator] || op.operator;
        cubeMatchInfo += `${opName}(${Number(op.games)} parties, ${Math.round(op.averagescore)} pts)`;
        if (i < cubeMatchOperators.length - 1) cubeMatchInfo += ', ';
      });
    }
    
    console.log('üí¨ Info compl√®te CubeMatch:', cubeMatchInfo);
    
    // 5. Comparer avec ce que dit l'IA
    console.log('\nüéØ Comparaison avec l\'IA:');
    console.log('- Interface montre: Niveau 27');
    console.log(`- Base de donn√©es: Niveau ${highestLevel}`);
    console.log(`- Diff√©rence: ${Math.abs(27 - highestLevel)} niveaux`);
    
    if (highestLevel !== 27) {
      console.log('‚ö†Ô∏è INCOH√âRENCE D√âTECT√âE !');
      console.log('L\'IA ne r√©cup√®re pas les donn√©es les plus r√©centes.');
    } else {
      console.log('‚úÖ Donn√©es coh√©rentes !');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration CubeMatch:', error);
  }

  // 6. V√©rifier les donn√©es d'activit√©s
  console.log('\nüìä R√©cup√©ration des donn√©es d\'activit√©s...');
  
  try {
    const lucasActivities = await prisma.activity.findMany({
      where: {
        userSessionId: 'cmf2yznx3000c45g0gqjs8844'
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    });

    console.log('üìù Activit√©s Lucas:', lucasActivities.length, 'activit√©s trouv√©es');
    
    const totalActivities = lucasActivities.length;
    const totalScore = lucasActivities.reduce((sum, activity) => sum + (activity.score || 0), 0);
    const averageScore = totalActivities > 0 ? Math.round(totalScore / totalActivities) : 0;
    
    console.log(`üìä Stats activit√©s: ${totalActivities} activit√©s, score moyen ${averageScore}/100`);
    
    if (lucasActivities.length > 0) {
      console.log('üìù Derni√®res activit√©s:');
      lucasActivities.slice(0, 5).forEach((activity, i) => {
        console.log(`   ${i + 1}. ${activity.domain} (${activity.score}/100) - ${activity.createdAt}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration activit√©s:', error);
  }

  console.log('\n‚úÖ Test termin√© !');
  console.log('\nüéØ R√©sum√©:');
  console.log('- ‚úÖ R√©cup√©ration des donn√©es CubeMatch en temps r√©el');
  console.log('- ‚úÖ Formatage pour l\'IA');
  console.log('- ‚úÖ V√©rification de la coh√©rence des donn√©es');
  console.log('- ‚úÖ D√©tection des incoh√©rences entre interface et IA');
}

testCubeMatchRealTime().catch(console.error);
