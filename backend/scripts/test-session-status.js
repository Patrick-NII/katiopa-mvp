#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la gestion des statuts en ligne/hors ligne
 * Ce script simule des connexions et d√©connexions pour tester le syst√®me
 */

const API_BASE = 'http://localhost:3001/api'

async function testSessionStatus() {
  console.log('üß™ Test du syst√®me de gestion des statuts en ligne/hors ligne')
  console.log('=' .repeat(60))

  try {
    // 1. V√©rifier les sessions existantes
    console.log('\n1Ô∏è‚É£ V√©rification des sessions existantes...')
    const sessionsResponse = await fetch(`${API_BASE}/sessions/children`, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    })

    if (sessionsResponse.ok) {
      const sessions = await sessionsResponse.json()
      console.log(`‚úÖ ${sessions.length} session(s) trouv√©e(s)`)
      
      sessions.forEach((session: any) => {
        console.log(`   - ${session.name} (${session.sessionId}): ${session.currentSessionStartTime ? 'üü¢ En ligne' : 'üî¥ Hors ligne'}`)
      })
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des sessions')
    }

    // 2. Nettoyer les sessions orphelines
    console.log('\n2Ô∏è‚É£ Nettoyage des sessions orphelines...')
    const cleanupResponse = await fetch(`${API_BASE}/sessions/cleanup-orphaned-sessions`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    })

    if (cleanupResponse.ok) {
      const cleanupResult = await cleanupResponse.json()
      console.log(`‚úÖ ${cleanupResult.cleanedCount} session(s) orpheline(s) nettoy√©e(s)`)
    } else {
      console.log('‚ùå Erreur lors du nettoyage des sessions orphelines')
    }

    // 3. Tester la mise √† jour de statut (simulation)
    console.log('\n3Ô∏è‚É£ Test de mise √† jour de statut...')
    if (sessionsResponse.ok) {
      const sessions = await sessionsResponse.json()
      if (sessions.length > 0) {
        const testSession = sessions[0]
        console.log(`   Test avec la session: ${testSession.name} (${testSession.sessionId})`)
        
        // Simuler une d√©connexion
        const disconnectResponse = await fetch(`${API_BASE}/sessions/status`, {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sessionId: testSession.sessionId,
            isOnline: false
          })
        })

        if (disconnectResponse.ok) {
          const disconnectResult = await disconnectResponse.json()
          console.log(`   ‚úÖ D√©connexion simul√©e: ${disconnectResult.isOnline ? 'üü¢ En ligne' : 'üî¥ Hors ligne'}`)
        } else {
          console.log('   ‚ùå Erreur lors de la simulation de d√©connexion')
        }

        // Simuler une reconnexion
        const connectResponse = await fetch(`${API_BASE}/sessions/status`, {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sessionId: testSession.sessionId,
            isOnline: true
          })
        })

        if (connectResponse.ok) {
          const connectResult = await connectResponse.json()
          console.log(`   ‚úÖ Reconnexion simul√©e: ${connectResult.isOnline ? 'üü¢ En ligne' : 'üî¥ Hors ligne'}`)
        } else {
          console.log('   ‚ùå Erreur lors de la simulation de reconnexion')
        }
      }
    }

    console.log('\n‚úÖ Test termin√© avec succ√®s!')
    console.log('\nüìã R√©sum√© des am√©liorations:')
    console.log('   ‚Ä¢ Gestion des √©v√©nements beforeunload et visibilitychange')
    console.log('   ‚Ä¢ Nettoyage automatique des sessions orphelines')
    console.log('   ‚Ä¢ Synchronisation en temps r√©el des statuts')
    console.log('   ‚Ä¢ Logs d√©taill√©s des connexions/d√©connexions')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testSessionStatus()
