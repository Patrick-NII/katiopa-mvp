import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();

// Test de contextualisation am√©lior√©e
async function testImprovedContextualization() {
  console.log('üß† Test de contextualisation am√©lior√©e...\n');

  try {
    // 1. R√©cup√©rer un parent de test
    console.log('üë§ R√©cup√©ration d\'un parent de test...');
    
    const parentSession = await prisma.userSession.findFirst({
      where: {
        userType: 'PARENT'
      },
      include: {
        account: true
      }
    });

    if (!parentSession) {
      console.log('‚ùå Aucun parent trouv√©');
      return;
    }

    console.log(`‚úÖ Parent trouv√©: ${parentSession.firstName} ${parentSession.lastName}`);

    // 2. Cr√©er un token JWT valide
    const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
    const token = jwt.sign(
      {
        userId: parentSession.id,
        accountId: parentSession.accountId,
        email: parentSession.account.email,
        userType: parentSession.userType
      },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // 3. Tester avec des questions sp√©cifiques
    const testQuestions = [
      "je souhaiterais que Emma passe plus de temps sur CubeMatch",
      "je souhaite que tu propose a emma plus de soustraction, elle n'aiment pas vraiment cela et preferes faire autre chose au moment de faire ces devoirs de maths",
      "Comment va Emma en math√©matiques ?",
      "Quelles sont les forces d'Emma ?",
      "Que recommandes-tu pour am√©liorer les r√©sultats d'Emma ?"
    ];

    console.log('üìù Test des questions de contextualisation...\n');

    for (const question of testQuestions) {
      console.log(`üîç Question: "${question}"`);
      
      const response = await fetch('http://localhost:3000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          messages: [
            {
              role: 'user',
              content: question
            }
          ],
          persona: 'pro'
        })
      });

      const data = await response.json();
      
      console.log(`üìä R√©ponse: ${data.text?.substring(0, 150)}...`);
      
      // Analyser la r√©ponse pour la contextualisation
      const responseText = data.text?.toLowerCase() || '';
      const hasSpecificData = responseText.includes('emma') || responseText.includes('score') || responseText.includes('activit√©');
      const hasNumbers = /\d+/.test(responseText);
      const hasRecommendations = responseText.includes('recommand') || responseText.includes('sugg√©r');
      
      console.log(`‚úÖ Contextualisation: ${hasSpecificData ? 'OUI' : 'NON'}`);
      console.log(`üìä Donn√©es chiffr√©es: ${hasNumbers ? 'OUI' : 'NON'}`);
      console.log(`üí° Recommandations: ${hasRecommendations ? 'OUI' : 'NON'}`);
      console.log('');
    }

    // 4. V√©rifier les prompts sauvegard√©s
    console.log('üîç V√©rification des prompts sauvegard√©s...');
    
    const recentPrompts = await prisma.parentPrompt.findMany({
      where: {
        accountId: parentSession.accountId,
        createdAt: {
          gte: new Date(Date.now() - 10 * 60 * 1000) // Prompts des 10 derni√®res minutes
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`üìù ${recentPrompts.length} prompts r√©cents trouv√©s`);
    
    if (recentPrompts.length > 0) {
      console.log('\nüìã Derniers prompts:');
      recentPrompts.forEach((prompt, index) => {
        console.log(`${index + 1}. "${prompt.content}"`);
        console.log(`   Type: ${prompt.promptType}`);
        console.log(`   Date: ${new Date(prompt.createdAt).toLocaleString('fr-FR')}`);
        console.log('');
      });
    }

    console.log('=' .repeat(70));
    console.log('üß† TEST DE CONTEXTUALISATION TERMIN√â');
    console.log('=' .repeat(70));
    console.log('');
    console.log('üìã Am√©liorations apport√©es :');
    console.log('   ‚úÖ Formatage d√©taill√© des donn√©es enfants');
    console.log('   ‚úÖ Analyse par domaine avec tendances');
    console.log('   ‚úÖ Int√©gration des donn√©es CubeMatch');
    console.log('   ‚úÖ Recommandations personnalis√©es');
    console.log('   ‚úÖ Instructions de contextualisation');
    console.log('   ‚úÖ Exemples de r√©ponses contextualis√©es');
    console.log('');
    console.log('üéØ R√©sultats attendus :');
    console.log('   - R√©ponses avec donn√©es chiffr√©es sp√©cifiques');
    console.log('   - Mentions des domaines forts/faibles');
    console.log('   - Recommandations bas√©es sur les donn√©es');
    console.log('   - Utilisation de l\'historique parent');
    console.log('=' .repeat(70));

  } catch (error) {
    console.error('‚ùå Erreur lors du test de contextualisation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testImprovedContextualization().catch(console.error);
