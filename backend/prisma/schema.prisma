generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Compte principal (une adresse email = un compte)
model Account {
  id                String        @id @default(cuid())
  email             String        @unique
  subscriptionType  SubscriptionType @default(FREE)
  maxSessions       Int           @default(2)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  totalAccountConnectionDurationMs BigInt @default(0)
  
  // Relations
  userSessions      UserSession[]
  conversations     Conversation[]
  billingHistory    BillingRecord[]
  planSeat          PlanSeat?
  reportPreferences ReportPreference?
  dailyReportUserSessions DailyReportUserSession[]
  parentPrompts     ParentPrompt[]
}

// Session utilisateur (connexion avec ID/mot de passe)
model UserSession {
  id              String      @id @default(cuid())
  accountId       String
  sessionId       String      @unique
  password        String
  firstName       String
  lastName        String
  gender          Gender      @default(UNKNOWN)
  userType        UserType    @default(CHILD)
  age             Int?
  grade           String?
  country         String?
  timezone        String?
  preferences     Json?
  isActive        Boolean     @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  totalConnectionDurationMs BigInt @default(0)
  currentSessionStartTime DateTime?
  
  // Relations
  account         Account     @relation(fields: [accountId], references: [id])
  activities      Activity[]
  childActivities ChildActivity[]
  learningSessions LearningSession[]
  parentPreferences ParentPreferences?
  conversations   Conversation[]
  profile         UserProfile?
  userInteractions UserInteraction[]
  userPrompts     UserPrompt[]
  navigationSessions NavigationSession[]
  performanceMetrics PerformanceMetric[]
  passwordResetTokens PasswordResetToken[]
  aiAnalyses      AIAnalysis[]
  parentPrompts   ParentPrompt[] @relation("ParentPrompts")
  childPrompts    ParentPrompt[] @relation("ChildPrompts")
  cubeMatchScores CubeMatchScore[]
  cubeMatchUserStats CubeMatchUserStats?
}

// Profil détaillé de l'utilisateur
model UserProfile {
  id                    String      @id @default(cuid())
  userSessionId         String      @unique
  learningGoals         String[]
  preferredSubjects     String[]
  learningStyle         String?
  difficulty            String?
  sessionPreferences    Json?
  interests            String[]
  specialNeeds         String[]
  customNotes          String?
  parentWishes         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  
  // Relations
  userSession          UserSession  @relation(fields: [userSessionId], references: [id])
}

// Activités d'apprentissage
model Activity {
  id         String      @id @default(cuid())
  userSessionId String
  domain     String
  nodeKey    String
  score      Int?
  attempts   Int         @default(1)
  durationMs Int?
  createdAt  DateTime    @default(now())
  
  // Relations
  userSession UserSession @relation(fields: [userSessionId], references: [id])
}

// Activités détaillées des enfants
model ChildActivity {
  id          String      @id @default(cuid())
  sessionId   String      // Référence à UserSession.id
  type        String      // MATH, READING, SCIENCE, CODING, GAME
  title       String
  score       Int
  duration    Int         // en minutes
  difficulty  String      // EASY, MEDIUM, HARD
  completedAt DateTime    @default(now())
  learningSessionId String? // Référence à LearningSession.id
  
  // Relations
  userSession     UserSession @relation(fields: [sessionId], references: [id])
  learningSession LearningSession? @relation(fields: [learningSessionId], references: [id])
}

// Sessions d'apprentissage détaillées
model LearningSession {
  id              String      @id @default(cuid())
  userSessionId   String
  startTime       DateTime    @default(now())
  endTime         DateTime?
  duration        Int         // en minutes
  breaks          Int         @default(0)
  completionRate  Float       @default(100.0)
  mood            String?     // "motivé", "fatigué", "concentré", "distrait"
  notes           String?     // Notes du parent ou de l'IA
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  activities      ChildActivity[]
}

// Préférences parentales pour l'apprentissage
model ParentPreferences {
  id                String      @id @default(cuid())
  userSessionId     String      @unique
  childStrengths    String[]    // ["maths", "logique", "créativité"]
  focusAreas        String[]    // ["lecture", "concentration", "patience"]
  learningGoals     String[]    // ["améliorer la lecture", "développer la logique"]
  concerns          String[]    // ["difficulté de concentration", "lenteur en lecture"]
  preferredSchedule Json        // {morning: true, afternoon: false, evening: true}
  studyDuration     Int         @default(30) // durée recommandée en minutes
  breakFrequency    Int         @default(15) // pause toutes les X minutes
  learningStyle     String?     // "visuel", "auditif", "kinesthésique"
  motivationFactors String[]    // ["récompenses", "jeux", "défis"]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  userSession       UserSession @relation(fields: [userSessionId], references: [id])
}

// Conversations avec l'IA
model Conversation {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  message         String
  response        String
  focus           String?
  context         Json?
  metadata        Json?
  createdAt       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Réinitialisation de mot de passe
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userSessionId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  userSession UserSession @relation(fields: [userSessionId], references: [id])
}

// Historique de facturation
model BillingRecord {
  id              String        @id @default(cuid())
  accountId       String
  amount          Float
  currency        String        @default("EUR")
  status          BillingStatus @default(PENDING)
  description     String?
  invoiceNumber   String?
  dueDate         DateTime?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  
  // Relations
  account         Account       @relation(fields: [accountId], references: [id])
}

// Siège de plan
model PlanSeat {
  id        String   @id @default(cuid())
  accountId String   @unique
  seatNumber Int
  isActive   Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  account   Account  @relation(fields: [accountId], references: [id])
}

// Interactions utilisateur
model UserInteraction {
  id              String   @id @default(cuid())
  userSessionId   String
  interactionType String
  data            Json?
  timestamp       DateTime @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

// Prompts utilisateur
model UserPrompt {
  id              String   @id @default(cuid())
  userSessionId   String
  prompt          String
  response        String?
  metadata        Json?
  createdAt       DateTime @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

// Sessions de navigation
model NavigationSession {
  id              String   @id @default(cuid())
  userSessionId   String
  startTime       DateTime @default(now())
  endTime         DateTime?
  pages           Json?
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

// Métriques de performance
model PerformanceMetric {
  id              String   @id @default(cuid())
  userSessionId   String
  metricType      String
  value           Float
  timestamp       DateTime @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

// Analyses IA stockées
model AIAnalysis {
  id              String      @id @default(cuid())
  userSessionId   String
  analysisType    String      // "progress", "exercise", "global"
  content         String      // Contenu de l'analyse IA
  prompt          String      // Prompt utilisé
  context         Json        // Contexte envoyé à l'IA
  metadata        Json?       // Métadonnées supplémentaires
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

// Modèles pour le système de logging des emails
model EmailLog {
  id            Int       @id @default(autoincrement())
  emailType     EmailType @map("email_type")
  fromEmail     String    @map("from_email")
  toEmail       String    @map("to_email")
  subject       String
  htmlContent   String?   @map("html_content")
  textContent   String?   @map("text_content")
  status        EmailStatus @default(PENDING)
  messageId     String?   @map("message_id")
  smtpResponse  String?   @map("smtp_response")
  errorMessage  String?   @map("error_message")
  retryCount    Int       @default(0) @map("retry_count")
  scheduledAt   DateTime  @default(now()) @map("scheduled_at")
  sentAt        DateTime? @map("sent_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  bounces       EmailBounce[]

  @@map("email_logs")
}

model IncomingEmail {
  id          Int           @id @default(autoincrement())
  fromEmail   String        @map("from_email")
  toEmail     String        @map("to_email")
  subject     String?
  body        String?
  headers     Json?
  messageId   String?       @map("message_id")
  emailType   IncomingEmailType @default(SUPPORT) @map("email_type")
  priority    EmailPriority @default(NORMAL) @map("priority")
  status      IncomingEmailStatus @default(NEW) @map("status")
  assignedTo  String?       @map("assigned_to")
  ticketId    String?       @map("ticket_id")
  tags        String[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("incoming_emails")
}

model EmailTemplate {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  emailType       EmailType @map("email_type")
  subjectTemplate String    @map("subject_template")
  htmlTemplate    String    @map("html_template")
  textTemplate    String?   @map("text_template")
  variables       Json      @default("{}")
  isActive        Boolean   @default(true) @map("is_active")
  version         Int       @default(1)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("email_templates")
}

model EmailStatistics {
  id              Int       @id @default(autoincrement())
  emailType       EmailType @map("email_type")
  date            DateTime  @db.Date
  sentCount       Int       @default(0) @map("sent_count")
  deliveredCount  Int       @default(0) @map("delivered_count")
  failedCount     Int       @default(0) @map("failed_count")
  bouncedCount    Int       @default(0) @map("bounced_count")
  openedCount     Int       @default(0) @map("opened_count")
  clickedCount    Int       @default(0) @map("clicked_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@unique([emailType, date])
  @@map("email_statistics")
}

model EmailBounce {
  id           Int         @id @default(autoincrement())
  emailLogId   Int?        @map("email_log_id")
  emailAddress String      @map("email_address")
  bounceType   BounceType  @map("bounce_type")
  reason       String?
  smtpResponse String?     @map("smtp_response")
  receivedAt   DateTime    @default(now()) @map("received_at")

  // Relations
  emailLog     EmailLog?   @relation(fields: [emailLogId], references: [id])

  @@map("email_bounces")
}

// Modèles pour les rapports quotidiens
model DailyReportUserSession {
  id              String   @id @default(cuid())
  accountId       String   @map("account_id")
  childNickname   String   @map("child_nickname")
  childAge        Int      @map("child_age")
  parentEmail     String   @map("parent_email")
  goals           Json     @default("{}")
  consentEmail    Boolean  @default(true) @map("consent_email")
  emailFrequency  String   @default("daily") @map("email_frequency")
  emailTime       String   @default("19:30:00") @map("email_time")
  emailDomains    String[] @default(["maths", "programmation", "playcube"]) @map("email_domains")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  account         Account  @relation(fields: [accountId], references: [id])
  learningEvents  DailyReportLearningEvent[]
  quizResults     DailyReportQuizResult[]
  sessionStats    DailyReportSessionStatsDaily[]
  dailyReports    DailyReport[]

  @@map("user_sessions")
}

model DailyReportLearningEvent {
  id           String   @id @default(cuid())
  sessionId    String   @map("session_id")
  ts           DateTime @default(now())
  domain       String
  activity     String
  durationSec  Int      @map("duration_sec")
  successRatio Float?   @map("success_ratio")
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  session      DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("learning_events")
}

model DailyReportQuizResult {
  id        String   @id @default(cuid())
  sessionId String   @map("session_id")
  ts        DateTime @default(now())
  module    String
  score     Float
  attempts  Int      @default(1)
  timeSec   Int      @map("time_sec")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  session   DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

model DailyReportSessionStatsDaily {
  sessionId        String   @map("session_id")
  date             DateTime @db.Date
  totalTimeMin     Int      @default(0) @map("total_time_min")
  kpiAssiduite     Float    @default(0) @map("kpi_assiduite")
  kpiComprehension Float    @default(0) @map("kpi_comprehension")
  kpiProgression   Float    @default(0) @map("kpi_progression")
  sessionsCount    Int      @default(0) @map("sessions_count")
  bestModule       String?  @map("best_module")
  needsHelp        String?  @map("needs_help")
  consecutiveDays  Int      @default(0) @map("consecutive_days")
  focusScore       Float    @default(0) @map("focus_score")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  session          DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([sessionId, date])
  @@map("session_stats_daily")
}

model DailyReport {
  id           String   @id @default(cuid())
  sessionId    String   @map("session_id")
  date         DateTime @db.Date
  subject      String
  htmlContent  String   @map("html_content")
  textContent  String   @map("text_content")
  modelUsed    String   @map("model_used")
  promptUsed   String?  @map("prompt_used")
  kpisSnapshot Json     @map("kpis_snapshot")
  sentAt       DateTime @default(now()) @map("sent_at")
  parentEmail  String   @map("parent_email")
  status       String   @default("sent")
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  session      DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("daily_reports")
}

model ReportPreference {
  id           String   @id @default(cuid())
  accountId    String   @unique @map("account_id")
  frequency    String   @default("daily")
  preferredTime String  @default("19:30:00") @map("preferred_time")
  domains      String[] @default(["maths", "programmation", "playcube"])
  includeGoals Boolean  @default(true) @map("include_goals")
  includeAdvice Boolean @default(true) @map("include_advice")
  includeStats Boolean  @default(true) @map("include_stats")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("report_preferences")
}

// Enums pour les emails
enum EmailType {
  HELLO
  SUPPORT
  NOREPLY
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum IncomingEmailType {
  SUPPORT
  HELLO
  GENERAL
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum IncomingEmailStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BounceType {
  HARD
  SOFT
  COMPLAINT
}

// Enums existants
enum SubscriptionType {
  FREE
  PRO
  PRO_PLUS
  ENTERPRISE
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum UserType {
  PARENT
  CHILD
  TEACHER
  ADMIN
}

enum BillingStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
  OVERDUE
}

// Nouveaux modèles pour les prompts parents et CubeAI

// Prompts des parents pour les enfants
model ParentPrompt {
  id              String      @id @default(cuid())
  content         String      // Contenu original du prompt
  processedContent String?     // Contenu traité et clarifié par l'IA
  aiResponse      String?     // Réponse de l'IA lors du traitement
  promptType      String      @default("PARENT_NOTES") // Type de prompt
  status          PromptStatus @default(PENDING)
  
  // Relations
  parentSessionId String      @map("parent_session_id")
  childSessionId  String      @map("child_session_id")
  accountId       String      @map("account_id")
  
  parentSession   UserSession @relation("ParentPrompts", fields: [parentSessionId], references: [id], onDelete: Cascade)
  childSession    UserSession @relation("ChildPrompts", fields: [childSessionId], references: [id], onDelete: Cascade)
  account         Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("parent_prompts")
}

// Statut des prompts
enum PromptStatus {
  PENDING
  PROCESSED
  ERROR
}

// Modèles CubeMatch pour les données de jeu
model CubeMatchScore {
  id              String      @id @default(uuid())
  user_id         String      @map("user_id")
  username        String      @db.VarChar(255)
  score           Int
  level           Int
  time_played_ms  BigInt      @map("time_played_ms")
  operator        String      @db.VarChar(10)
  target          Int
  allow_diagonals Boolean     @default(false) @map("allow_diagonals")
  created_at      DateTime    @default(now()) @map("created_at")
  updated_at      DateTime    @updatedAt @map("updated_at")
  
  // Relations
  userSession     UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("cubematch_scores")
}

model CubeMatchStats {
  id                  String      @id @default(uuid())
  total_games         BigInt      @default(0)
  total_score         BigInt      @default(0)
  average_score       Decimal     @default(0) @db.Decimal(10, 2)
  best_score          Int         @default(0)
  total_time_played   BigInt      @default(0)
  average_time_played Decimal     @default(0) @db.Decimal(10, 2)
  highest_level       Int         @default(1)
  last_updated        DateTime    @default(now())
  total_players       Int         @default(0)
  average_level       Decimal     @default(1) @db.Decimal(5, 2)
  most_used_operator  String      @default("ADD") @db.VarChar(10)
  
  @@map("cubematch_stats")
}

model CubeMatchUserStats {
  id                  String      @id @default(uuid())
  user_id             String      @unique @map("user_id")
  username            String      @db.VarChar(255)
  total_games         Int         @default(0)
  total_score         BigInt      @default(0)
  best_score          Int         @default(0)
  average_score       Decimal     @default(0) @db.Decimal(10, 2)
  highest_level       Int         @default(1)
  total_time_played   BigInt      @default(0)
  average_time_played Decimal     @default(0) @db.Decimal(10, 2)
  total_combo_max     Int         @default(0)
  total_cells_cleared Int         @default(0)
  total_hints_used    Int         @default(0)
  favorite_operator   String      @default("ADD") @db.VarChar(10)
  last_played         DateTime    @default(now())
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  
  // Relations
  userSession         UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("cubematch_user_stats")
}
