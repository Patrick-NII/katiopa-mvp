generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Compte principal (une adresse email = un compte)
model Account {
  id                String        @id @default(cuid())
  email             String        @unique
  subscriptionType  SubscriptionType @default(FREE)
  maxSessions       Int           @default(2)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  totalAccountConnectionDurationMs BigInt @default(0)
  
  // Relations
  userSessions      UserSession[]
  conversations     Conversation[]
  billingHistory    BillingRecord[]
  planSeat          PlanSeat?
  userInteractions  UserInteraction[]
  userPrompts       UserPrompt[]
  navigationSessions NavigationSession[]
  performanceMetrics PerformanceMetric[]
  passwordResetTokens PasswordResetToken[]
  reportPreferences ReportPreference?
}

// Session utilisateur (connexion avec ID/mot de passe)
model UserSession {
  id              String      @id @default(cuid())
  accountId       String
  sessionId       String      @unique
  password        String
  firstName       String
  lastName        String
  gender          Gender      @default(UNKNOWN)
  userType        UserType    @default(CHILD)
  age             Int?
  grade           String?
  country         String?
  timezone        String?
  preferences     Json?
  isActive        Boolean     @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  totalConnectionDurationMs BigInt @default(0)
  currentSessionStartTime DateTime?
  
  // Relations
  account         Account     @relation(fields: [accountId], references: [id])
  activities      Activity[]
  conversations   Conversation[]
  profile         UserProfile?
  userInteractions UserInteraction[]
  userPrompts     UserPrompt[]
  navigationSessions NavigationSession[]
  performanceMetrics PerformanceMetric[]
  passwordResetTokens PasswordResetToken[]
  // Nouvelles relations
  gameSessions      GameSession[]
  exerciseAttempts  ExerciseAttempt[]
  schedules         Schedule[]
  welcomeMessages   WelcomeMessage[]
  recommendations   Recommendation[]
  gameRatings       GameRating[]
  exerciseRatings   ExerciseRating[]
}

// Profil détaillé de l'utilisateur
model UserProfile {
  id                    String      @id @default(cuid())
  userSessionId         String      @unique
  learningGoals         String[]
  preferredSubjects     String[]
  learningStyle         String?
  difficulty            String?
  sessionPreferences    Json?
  interests            String[]
  specialNeeds         String[]
  customNotes          String?
  parentWishes         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  
  // Relations
  userSession          UserSession  @relation(fields: [userSessionId], references: [id])
}

// Activités d'apprentissage
model Activity {
  id         String      @id @default(cuid())
  userSessionId String
  domain     String
  nodeKey    String
  score      Int?
  attempts   Int         @default(1)
  durationMs Int?
  createdAt  DateTime    @default(now())
  
  // Relations
  userSession UserSession @relation(fields: [userSessionId], references: [id])
}

// Conversations avec l'IA
model Conversation {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  message         String
  response        String
  focus           String?
  context         Json?
  metadata        Json?
  createdAt       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Réinitialisation de mot de passe
model PasswordResetToken {
  id            String   @id @default(cuid())
  accountId     String
  userSessionId String
  token         String   @unique
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime @default(now())

  // Relations
  account       Account     @relation(fields: [accountId], references: [id])
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

// Historique de facturation
model BillingRecord {
  id          String      @id @default(cuid())
  accountId   String
  amount      Float
  currency    String      @default("EUR")
  description String
  status      BillingStatus @default(PENDING)
  billingDate DateTime    @default(now())
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  
  // Relations
  account     Account     @relation(fields: [accountId], references: [id])
}

// Limites du plan par compte (1-1)
model PlanSeat {
  id          String   @id @default(cuid())
  accountId   String   @unique
  maxChildren Int

  // Relation vers le compte
  account     Account  @relation(fields: [accountId], references: [id])
}

// Interactions utilisateur (clicks, inputs, navigation)
model UserInteraction {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  interactionType InteractionType
  elementType     ElementType
  elementId       String?
  elementName     String?
  elementValue    String?
  pageUrl         String?
  pageTitle       String?
  timestamp       DateTime    @default(now())
  metadata        Json?
  sessionDuration Int?        // Durée de session en ms au moment de l'interaction
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Prompts et inputs utilisateur
model UserPrompt {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  promptType      PromptType
  content         String
  context         Json?
  response        String?
  responseTime    Int?        // Temps de réponse en ms
  tokensUsed      Int?
  modelUsed       String?
  success         Boolean     @default(true)
  errorMessage    String?
  timestamp       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Sessions de navigation
model NavigationSession {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  startTime       DateTime    @default(now())
  endTime         DateTime?
  duration        Int?        // Durée en ms
  pagesVisited    String[]    // URLs visitées
  actionsPerformed Int        @default(0)
  sessionData     Json?
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Métriques de performance
model PerformanceMetric {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  metricType      MetricType
  value           Float
  unit            String?
  context         Json?
  timestamp       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Enums pour les nouveaux modèles
enum InteractionType {
  CLICK
  INPUT
  SUBMIT
  NAVIGATION
  SCROLL
  HOVER
  FOCUS
  BLUR
  KEYPRESS
  MOUSE_MOVE
  TOUCH
  GESTURE
  VOICE
  OTHER
}

enum ElementType {
  BUTTON
  INPUT
  TEXTAREA
  SELECT
  CHECKBOX
  RADIO
  LINK
  TAB
  CARD
  MODAL
  SIDEBAR
  HEADER
  FOOTER
  NAVIGATION
  FORM
  CHAT_INPUT
  AI_RESPONSE
  EXERCISE
  GAME
  VIDEO
  AUDIO
  IMAGE
  OTHER
}

enum PromptType {
  CHAT_MESSAGE
  EXERCISE_QUESTION
  AI_ASSISTANCE
  SEARCH
  FILTER
  SORT
  EXPORT
  IMPORT
  SETTINGS
  FEEDBACK
  SUPPORT
  OTHER
}

enum MetricType {
  LOAD_TIME
  RESPONSE_TIME
  CLICK_RATE
  CONVERSION_RATE
  ENGAGEMENT_TIME
  ERROR_RATE
  SUCCESS_RATE
  SATISFACTION_SCORE
  USAGE_FREQUENCY
  FEATURE_USAGE
  OTHER
}

// Modèles pour le système de logging des emails
model EmailLog {
  id            Int       @id @default(autoincrement())
  emailType     EmailType
  fromEmail     String    @map("from_email")
  toEmail       String    @map("to_email")
  subject       String
  htmlContent   String?   @map("html_content")
  textContent   String?   @map("text_content")
  status        EmailStatus @default(PENDING)
  messageId     String?   @map("message_id")
  smtpResponse  String?   @map("smtp_response")
  errorMessage  String?   @map("error_message")
  retryCount    Int       @default(0) @map("retry_count")
  scheduledAt   DateTime  @default(now()) @map("scheduled_at")
  sentAt        DateTime? @map("sent_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  bounces       EmailBounce[]

  @@map("email_logs")
}

model IncomingEmail {
  id          Int           @id @default(autoincrement())
  fromEmail   String        @map("from_email")
  toEmail     String        @map("to_email")
  subject     String?
  body        String?
  headers     Json?
  messageId   String?       @map("message_id")
  emailType   IncomingEmailType @default(SUPPORT) @map("email_type")
  priority    EmailPriority @default(NORMAL) @map("priority")
  status      IncomingEmailStatus @default(NEW) @map("status")
  assignedTo  String?        @map("assigned_to")
  ticketId    String?        @map("ticket_id")
  tags        String[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  assignedUser UserSession? @relation(fields: [assignedTo], references: [id])

  @@map("incoming_emails")
}

model EmailTemplate {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  emailType       EmailType @map("email_type")
  subjectTemplate String    @map("subject_template")
  htmlTemplate    String    @map("html_template")
  textTemplate    String?   @map("text_template")
  variables       Json      @default("{}")
  isActive        Boolean   @default(true) @map("is_active")
  version         Int       @default(1)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("email_templates")
}

model EmailStatistics {
  id              Int       @id @default(autoincrement())
  emailType       EmailType @map("email_type")
  date            DateTime  @db.Date
  sentCount       Int       @default(0) @map("sent_count")
  deliveredCount  Int       @default(0) @map("delivered_count")
  failedCount     Int       @default(0) @map("failed_count")
  bouncedCount    Int       @default(0) @map("bounced_count")
  openedCount     Int       @default(0) @map("opened_count")
  clickedCount    Int       @default(0) @map("clicked_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@unique([emailType, date])
  @@map("email_statistics")
}

model EmailBounce {
  id           Int         @id @default(autoincrement())
  emailLogId   Int?        @map("email_log_id")
  emailAddress String      @map("email_address")
  bounceType   BounceType  @map("bounce_type")
  reason       String?
  smtpResponse String?     @map("smtp_response")
  receivedAt   DateTime    @default(now()) @map("received_at")

  // Relations
  emailLog     EmailLog?   @relation(fields: [emailLogId], references: [id])

  @@map("email_bounces")
}

// Enums pour les emails
enum EmailType {
  HELLO
  SUPPORT
  NOREPLY
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum IncomingEmailType {
  SUPPORT
  HELLO
  GENERAL
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum IncomingEmailStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BounceType {
  HARD
  SOFT
  COMPLAINT
}

// Modèles pour les comptes rendus quotidiens
model UserSession {
  id              String   @id @default(cuid())
  accountId       String   @map("account_id")
  childNickname   String   @map("child_nickname")
  childAge        Int      @map("child_age")
  parentEmail     String   @map("parent_email")
  goals           Json     @default("{}")
  consentEmail    Boolean  @default(true) @map("consent_email")
  emailFrequency  String   @default("daily") @map("email_frequency")
  emailTime       String   @default("19:30:00") @map("email_time")
  emailDomains    String[] @default(["maths", "programmation", "playcube"]) @map("email_domains")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  account         Account  @relation(fields: [accountId], references: [id])
  learningEvents  LearningEvent[]
  quizResults     QuizResult[]
  sessionStats    SessionStatsDaily[]
  dailyReports    DailyReport[]

  @@map("user_sessions")
}

model LearningEvent {
  id           String   @id @default(cuid())
  sessionId    String   @map("session_id")
  ts           DateTime @default(now())
  domain       String
  activity     String
  durationSec  Int      @map("duration_sec")
  successRatio Float?   @map("success_ratio")
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  session      UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("learning_events")
}

model QuizResult {
  id        String   @id @default(cuid())
  sessionId String   @map("session_id")
  ts        DateTime @default(now())
  module    String
  score     Float
  attempts  Int      @default(1)
  timeSec   Int      @map("time_sec")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  session   UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

model SessionStatsDaily {
  sessionId        String   @map("session_id")
  date             DateTime @db.Date
  totalTimeMin     Int      @default(0) @map("total_time_min")
  kpiAssiduite     Float    @default(0) @map("kpi_assiduite")
  kpiComprehension Float    @default(0) @map("kpi_comprehension")
  kpiProgression   Float    @default(0) @map("kpi_progression")
  sessionsCount    Int      @default(0) @map("sessions_count")
  bestModule       String?  @map("best_module")
  needsHelp        String?  @map("needs_help")
  consecutiveDays  Int      @default(0) @map("consecutive_days")
  focusScore       Float    @default(0) @map("focus_score")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  session          UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([sessionId, date])
  @@map("session_stats_daily")
}

model DailyReport {
  id           String   @id @default(cuid())
  sessionId    String   @map("session_id")
  date         DateTime @db.Date
  subject      String
  htmlContent  String   @map("html_content")
  textContent  String   @map("text_content")
  modelUsed    String   @map("model_used")
  promptUsed   String?  @map("prompt_used")
  kpisSnapshot Json     @map("kpis_snapshot")
  sentAt       DateTime @default(now()) @map("sent_at")
  parentEmail  String   @map("parent_email")
  status       String   @default("sent")
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  session      UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("daily_reports")
}

model ReportPreference {
  id           String   @id @default(cuid())
  accountId    String   @unique @map("account_id")
  frequency    String   @default("daily")
  preferredTime String  @default("19:30:00") @map("preferred_time")
  domains      String[] @default(["maths", "programmation", "playcube"])
  includeGoals Boolean  @default(true) @map("include_goals")
  includeAdvice Boolean @default(true) @map("include_advice")
  includeStats Boolean  @default(true) @map("include_stats")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("report_preferences")
}

// Enums existants
enum SubscriptionType {
  FREE
  PRO
  PRO_PLUS
  ENTERPRISE
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum UserType {
  PARENT
  CHILD
  TEACHER
  ADMIN
}

enum BillingStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
  OVERDUE
}
