generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                               String                   @id @default(cuid())
  email                            String                   @unique
  subscriptionType                 SubscriptionType         @default(FREE)
  maxSessions                      Int                      @default(2)
  isActive                         Boolean                  @default(true)
  createdAt                        DateTime                 @default(now())
  updatedAt                        DateTime                 @updatedAt
  totalAccountConnectionDurationMs BigInt                   @default(0)
  agreedActivities                 AgreedActivity[]
  billingHistory                   BillingRecord[]
  conversations                    Conversation[]
  planSeat                         PlanSeat?
  userSessions                     UserSession[]
  childPrompts                     ChildPrompt[]
  parentPrompts                    ParentPrompt[]
  reportPreferences                ReportPreference?
  dailyReportUserSessions          DailyReportUserSession[]
}

model UserSession {
  id                        String                     @id @default(cuid())
  accountId                 String
  sessionId                 String                     @unique
  password                  String
  firstName                 String
  lastName                  String
  gender                    Gender                     @default(UNKNOWN)
  userType                  UserType                   @default(CHILD)
  age                       Int?
  grade                     String?
  country                   String?
  timezone                  String?
  preferences               Json?
  isActive                  Boolean                    @default(true)
  lastLoginAt               DateTime?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  totalConnectionDurationMs BigInt                     @default(0)
  currentSessionStartTime   DateTime?
  aiAnalyses                AIAnalysis[]
  activities                Activity[]
  agreedActivities          AgreedActivity[]
  childActivities           ChildActivity[]
  conversations             Conversation[]
  learningSessions          LearningSession[]
  navigationSessions        NavigationSession[]
  parentPreferences         ParentPreferences?
  passwordResetTokens       PasswordResetToken[]
  performanceMetrics        PerformanceMetric[]
  userInteractions          UserInteraction[]
  profile                   UserProfile?
  userPrompts               UserPrompt[]
  account                   Account                    @relation(fields: [accountId], references: [id])
  behavioralMetrics         BehavioralMetrics[]        @relation("BehavioralMetricsUser")
  childPerformanceAnalysis  ChildPerformanceAnalysis[] @relation("ChildPerformanceAnalysisChild")
  childPrompts              ChildPrompt[]              @relation("ChildPrompts")
  cubeMatchScores           CubeMatchScore[]
  cubeMatchUserStats        CubeMatchUserStats?
  parentPromptChildren      ParentPrompt[]             @relation("ParentPromptChild")
  parentPrompts             ParentPrompt[]             @relation("ParentPrompts")
  popupInteractions         PopupInteraction[]         @relation("PopupInteractionUser")
  rewardTracking            RewardTracking[]           @relation("RewardTrackingUser")
  upgradeTrackingChild      UpgradeTracking[]          @relation("UpgradeTrackingChild")
  upgradeTracking           UpgradeTracking[]          @relation("UpgradeTrackingUser")
}

model UserProfile {
  id                 String      @id @default(cuid())
  userSessionId      String      @unique
  learningGoals      String[]
  preferredSubjects  String[]
  learningStyle      String?
  difficulty         String?
  sessionPreferences Json?
  interests          String[]
  specialNeeds       String[]
  customNotes        String?
  parentWishes       String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
  userSession        UserSession @relation(fields: [userSessionId], references: [id])
}

model Activity {
  id            String      @id @default(cuid())
  userSessionId String
  domain        String
  nodeKey       String
  score         Int?
  attempts      Int         @default(1)
  durationMs    Int?
  createdAt     DateTime    @default(now())
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model ChildActivity {
  id                String           @id @default(cuid())
  sessionId         String
  type              String
  title             String
  score             Int
  duration          Int
  difficulty        String
  completedAt       DateTime         @default(now())
  learningSessionId String?
  learningSession   LearningSession? @relation(fields: [learningSessionId], references: [id])
  userSession       UserSession      @relation(fields: [sessionId], references: [id])
}

model LearningSession {
  id             String          @id @default(cuid())
  userSessionId  String
  startTime      DateTime        @default(now())
  endTime        DateTime?
  duration       Int
  breaks         Int             @default(0)
  completionRate Float           @default(100.0)
  mood           String?
  notes          String?
  activities     ChildActivity[]
  userSession    UserSession     @relation(fields: [userSessionId], references: [id])
}

model ParentPreferences {
  id                String      @id @default(cuid())
  userSessionId     String      @unique
  childStrengths    String[]
  focusAreas        String[]
  learningGoals     String[]
  concerns          String[]
  preferredSchedule Json
  studyDuration     Int         @default(30)
  breakFrequency    Int         @default(15)
  learningStyle     String?
  motivationFactors String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userSession       UserSession @relation(fields: [userSessionId], references: [id])
}

model Conversation {
  id            String      @id @default(cuid())
  userSessionId String
  accountId     String
  message       String
  response      String
  focus         String?
  context       Json?
  metadata      Json?
  createdAt     DateTime    @default(now())
  account       Account     @relation(fields: [accountId], references: [id])
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model PasswordResetToken {
  id            String      @id @default(cuid())
  token         String      @unique
  userSessionId String
  expiresAt     DateTime
  createdAt     DateTime    @default(now())
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model BillingRecord {
  id            String        @id @default(cuid())
  accountId     String
  amount        Float
  currency      String        @default("EUR")
  description   String?
  status        BillingStatus @default(PENDING)
  dueDate       DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  invoiceNumber String?
  account       Account       @relation(fields: [accountId], references: [id])
}

model PlanSeat {
  id         String   @id @default(cuid())
  accountId  String   @unique
  createdAt  DateTime @default(now())
  isActive   Boolean  @default(true)
  seatNumber Int
  account    Account  @relation(fields: [accountId], references: [id])
}

model UserInteraction {
  id              String      @id @default(cuid())
  userSessionId   String
  timestamp       DateTime    @default(now())
  data            Json?
  interactionType String
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

model UserPrompt {
  id            String      @id @default(cuid())
  userSessionId String
  response      String?
  createdAt     DateTime    @default(now())
  metadata      Json?
  prompt        String
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model AgreedActivity {
  id             String         @id @default(cuid())
  accountId      String
  childSessionId String
  activityType   String
  activityTitle  String
  description    String
  parentRequest  String
  bubixResponse  String
  status         ActivityStatus @default(PENDING)
  proposedAt     DateTime       @default(now())
  acceptedAt     DateTime?
  completedAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  account        Account        @relation(fields: [accountId], references: [id])
  childSession   UserSession    @relation(fields: [childSessionId], references: [id])
}

model NavigationSession {
  id            String      @id @default(cuid())
  userSessionId String
  startTime     DateTime    @default(now())
  endTime       DateTime?
  pages         Json?
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model PerformanceMetric {
  id            String      @id @default(cuid())
  userSessionId String
  value         Float
  timestamp     DateTime    @default(now())
  metricType    String
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model AIAnalysis {
  id            String      @id @default(cuid())
  userSessionId String
  analysisType  String
  content       String
  prompt        String
  context       Json
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model EmailLog {
  id           Int           @id @default(autoincrement())
  emailType    EmailType     @map("email_type")
  fromEmail    String        @map("from_email")
  toEmail      String        @map("to_email")
  subject      String
  htmlContent  String?       @map("html_content")
  textContent  String?       @map("text_content")
  status       EmailStatus   @default(PENDING)
  messageId    String?       @map("message_id")
  smtpResponse String?       @map("smtp_response")
  errorMessage String?       @map("error_message")
  retryCount   Int           @default(0) @map("retry_count")
  scheduledAt  DateTime      @default(now()) @map("scheduled_at")
  sentAt       DateTime?     @map("sent_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  bounces      EmailBounce[]

  @@map("email_logs")
}

model IncomingEmail {
  id         Int                 @id @default(autoincrement())
  fromEmail  String              @map("from_email")
  toEmail    String              @map("to_email")
  subject    String?
  body       String?
  headers    Json?
  messageId  String?             @map("message_id")
  emailType  IncomingEmailType   @default(SUPPORT) @map("email_type")
  priority   EmailPriority       @default(NORMAL) @map("priority")
  status     IncomingEmailStatus @default(NEW) @map("status")
  assignedTo String?             @map("assigned_to")
  ticketId   String?             @map("ticket_id")
  tags       String[]
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")

  @@map("incoming_emails")
}

model EmailTemplate {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  emailType       EmailType @map("email_type")
  subjectTemplate String    @map("subject_template")
  htmlTemplate    String    @map("html_template")
  textTemplate    String?   @map("text_template")
  variables       Json      @default("{}")
  isActive        Boolean   @default(true) @map("is_active")
  version         Int       @default(1)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("email_templates")
}

model EmailStatistics {
  id             Int       @id @default(autoincrement())
  emailType      EmailType @map("email_type")
  date           DateTime  @db.Date
  sentCount      Int       @default(0) @map("sent_count")
  deliveredCount Int       @default(0) @map("delivered_count")
  failedCount    Int       @default(0) @map("failed_count")
  bouncedCount   Int       @default(0) @map("bounced_count")
  openedCount    Int       @default(0) @map("opened_count")
  clickedCount   Int       @default(0) @map("clicked_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@unique([emailType, date])
  @@map("email_statistics")
}

model EmailBounce {
  id           Int        @id @default(autoincrement())
  emailLogId   Int?       @map("email_log_id")
  emailAddress String     @map("email_address")
  bounceType   BounceType @map("bounce_type")
  reason       String?
  smtpResponse String?    @map("smtp_response")
  receivedAt   DateTime   @default(now()) @map("received_at")
  emailLog     EmailLog?  @relation(fields: [emailLogId], references: [id])

  @@map("email_bounces")
}

model DailyReportUserSession {
  id             String                         @id @default(cuid())
  accountId      String                         @map("account_id")
  childNickname  String                         @map("child_nickname")
  childAge       Int                            @map("child_age")
  parentEmail    String                         @map("parent_email")
  goals          Json                           @default("{}")
  consentEmail   Boolean                        @default(true) @map("consent_email")
  emailFrequency String                         @default("daily") @map("email_frequency")
  emailTime      String                         @default("19:30:00") @map("email_time")
  emailDomains   String[]                       @default(["maths", "programmation", "playcube"]) @map("email_domains")
  createdAt      DateTime                       @default(now()) @map("created_at")
  updatedAt      DateTime                       @updatedAt @map("updated_at")
  dailyReports   DailyReport[]
  learningEvents DailyReportLearningEvent[]
  quizResults    DailyReportQuizResult[]
  sessionStats   DailyReportSessionStatsDaily[]
  account        Account                        @relation(fields: [accountId], references: [id])

  @@map("user_sessions")
}

model DailyReportLearningEvent {
  id           String                 @id @default(cuid())
  sessionId    String                 @map("session_id")
  ts           DateTime               @default(now())
  domain       String
  activity     String
  durationSec  Int                    @map("duration_sec")
  successRatio Float?                 @map("success_ratio")
  metadata     Json                   @default("{}")
  createdAt    DateTime               @default(now()) @map("created_at")
  session      DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("learning_events")
}

model DailyReportQuizResult {
  id        String                 @id @default(cuid())
  sessionId String                 @map("session_id")
  ts        DateTime               @default(now())
  module    String
  score     Float
  attempts  Int                    @default(1)
  timeSec   Int                    @map("time_sec")
  createdAt DateTime               @default(now()) @map("created_at")
  session   DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

model DailyReportSessionStatsDaily {
  sessionId        String                 @map("session_id")
  date             DateTime               @db.Date
  totalTimeMin     Int                    @default(0) @map("total_time_min")
  kpiAssiduite     Float                  @default(0) @map("kpi_assiduite")
  kpiComprehension Float                  @default(0) @map("kpi_comprehension")
  kpiProgression   Float                  @default(0) @map("kpi_progression")
  sessionsCount    Int                    @default(0) @map("sessions_count")
  bestModule       String?                @map("best_module")
  needsHelp        String?                @map("needs_help")
  consecutiveDays  Int                    @default(0) @map("consecutive_days")
  focusScore       Float                  @default(0) @map("focus_score")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  session          DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([sessionId, date])
  @@map("session_stats_daily")
}

model DailyReport {
  id           String                 @id @default(cuid())
  sessionId    String                 @map("session_id")
  date         DateTime               @db.Date
  subject      String
  htmlContent  String                 @map("html_content")
  textContent  String                 @map("text_content")
  modelUsed    String                 @map("model_used")
  promptUsed   String?                @map("prompt_used")
  kpisSnapshot Json                   @map("kpis_snapshot")
  sentAt       DateTime               @default(now()) @map("sent_at")
  parentEmail  String                 @map("parent_email")
  status       String                 @default("sent")
  errorMessage String?                @map("error_message")
  createdAt    DateTime               @default(now()) @map("created_at")
  session      DailyReportUserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("daily_reports")
}

model ReportPreference {
  id            String   @id @default(cuid())
  accountId     String   @unique @map("account_id")
  frequency     String   @default("daily")
  preferredTime String   @default("19:30:00") @map("preferred_time")
  domains       String[] @default(["maths", "programmation", "playcube"])
  includeGoals  Boolean  @default(true) @map("include_goals")
  includeAdvice Boolean  @default(true) @map("include_advice")
  includeStats  Boolean  @default(true) @map("include_stats")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("report_preferences")
}

model ParentPrompt {
  id               String       @id @default(cuid())
  content          String
  processedContent String?
  aiResponse       String?
  promptType       String       @default("PARENT_NOTES")
  status           PromptStatus @default(PENDING)
  parentSessionId  String       @map("parent_session_id")
  childSessionId   String       @map("child_session_id")
  accountId        String       @map("account_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  account          Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  childSession     UserSession  @relation("ParentPromptChild", fields: [childSessionId], references: [id], onDelete: Cascade)
  parentSession    UserSession  @relation("ParentPrompts", fields: [parentSessionId], references: [id], onDelete: Cascade)

  @@map("parent_prompts")
}

model ChildPrompt {
  id             String       @id @default(cuid())
  childMessage   String
  bubixResponse  String
  promptType     String       @default("CHILD_CHAT")
  activityType   String?
  difficulty     String       @default("MEDIUM")
  engagement     String?
  status         PromptStatus @default(PROCESSED)
  childSessionId String       @map("child_session_id")
  accountId      String       @map("account_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  account        Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  childSession   UserSession  @relation("ChildPrompts", fields: [childSessionId], references: [id], onDelete: Cascade)

  @@map("child_prompts")
}

model CubeMatchScore {
  id              String      @id @default(uuid())
  user_id         String      @map("user_id")
  username        String      @db.VarChar(255)
  score           Int
  level           Int
  time_played_ms  BigInt      @map("time_played_ms")
  operator        String      @db.VarChar(10)
  target          Int
  allow_diagonals Boolean     @default(false) @map("allow_diagonals")
  created_at      DateTime    @default(now()) @map("created_at")
  updated_at      DateTime    @updatedAt @map("updated_at")
  userSession     UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("cubematch_scores")
}

model CubeMatchStats {
  id                  String   @id @default(uuid())
  total_games         BigInt   @default(0)
  total_score         BigInt   @default(0)
  average_score       Decimal  @default(0) @db.Decimal(10, 2)
  best_score          Int      @default(0)
  total_time_played   BigInt   @default(0)
  average_time_played Decimal  @default(0) @db.Decimal(10, 2)
  highest_level       Int      @default(1)
  last_updated        DateTime @default(now())
  total_players       Int      @default(0)
  average_level       Decimal  @default(1) @db.Decimal(5, 2)
  most_used_operator  String   @default("ADD") @db.VarChar(10)

  @@map("cubematch_stats")
}

model CubeMatchUserStats {
  id                  String      @id @default(uuid())
  user_id             String      @unique @map("user_id")
  username            String      @db.VarChar(255)
  total_games         Int         @default(0)
  total_score         BigInt      @default(0)
  best_score          Int         @default(0)
  average_score       Decimal     @default(0) @db.Decimal(10, 2)
  highest_level       Int         @default(1)
  total_time_played   BigInt      @default(0)
  average_time_played Decimal     @default(0) @db.Decimal(10, 2)
  total_combo_max     Int         @default(0)
  total_cells_cleared Int         @default(0)
  total_hints_used    Int         @default(0)
  favorite_operator   String      @default("ADD") @db.VarChar(10)
  last_played         DateTime    @default(now())
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  userSession         UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("cubematch_user_stats")
}

model UpgradeTracking {
  id                   String       @id @default(cuid())
  userId               String
  childId              String?
  triggerType          String
  triggerData          Json?
  popupShownAt         DateTime?
  popupAction          String?
  upgradePageVisitedAt DateTime?
  conversionAt         DateTime?
  subscriptionType     String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  child                UserSession? @relation("UpgradeTrackingChild", fields: [childId], references: [id], onDelete: Cascade)
  user                 UserSession  @relation("UpgradeTrackingUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("upgrade_tracking")
}

model BehavioralMetrics {
  id          String      @id @default(cuid())
  userId      String
  sessionId   String?
  metricType  String
  metricValue Decimal
  contextData Json?
  recordedAt  DateTime    @default(now())
  user        UserSession @relation("BehavioralMetricsUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("behavioral_metrics")
}

model PopupInteraction {
  id             String      @id @default(cuid())
  userId         String
  popupType      String
  popupContent   Json?
  action         String
  actionData     Json?
  sessionContext Json?
  createdAt      DateTime    @default(now())
  user           UserSession @relation("PopupInteractionUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("popup_interactions")
}

model RewardTracking {
  id          String      @id @default(cuid())
  userId      String
  rewardType  String
  rewardCode  String?
  rewardValue Decimal?
  rewardData  Json?
  usedAt      DateTime?
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  user        UserSession @relation("RewardTrackingUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("reward_tracking")
}

model ChildPerformanceAnalysis {
  id               String      @id @default(cuid())
  childId          String
  analysisType     String
  analysisData     Json
  performanceLevel String
  confidence       Decimal
  recommendations  Json?
  createdAt        DateTime    @default(now())
  child            UserSession @relation("ChildPerformanceAnalysisChild", fields: [childId], references: [id], onDelete: Cascade)

  @@map("child_performance_analysis")
}

enum ActivityStatus {
  PENDING
  PROPOSED
  ACCEPTED
  COMPLETED
  DECLINED
}

enum EmailType {
  HELLO
  SUPPORT
  NOREPLY
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum IncomingEmailType {
  SUPPORT
  HELLO
  GENERAL
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum IncomingEmailStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum BounceType {
  HARD
  SOFT
  COMPLAINT
}

enum SubscriptionType {
  FREE
  DECOUVERTE
  EXPLORATEUR
  MAITRE
  ENTERPRISE
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum UserType {
  CHILD
  PARENT
  TEACHER
  ADMIN
}

enum BillingStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  FAILED
}

enum PromptStatus {
  PENDING
  PROCESSED
  ERROR
}
