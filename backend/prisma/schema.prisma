generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Compte principal (une adresse email = un compte)
model Account {
  id                String        @id @default(cuid())
  email             String        @unique
  subscriptionType  SubscriptionType @default(FREE)
  maxSessions       Int           @default(2)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  totalAccountConnectionDurationMs BigInt @default(0)
  
  // Relations
  userSessions      UserSession[]
  conversations     Conversation[]
  billingHistory    BillingRecord[]
  planSeat          PlanSeat?
  userInteractions  UserInteraction[]
  userPrompts       UserPrompt[]
  navigationSessions NavigationSession[]
  performanceMetrics PerformanceMetric[]
}

// Session utilisateur (connexion avec ID/mot de passe)
model UserSession {
  id              String      @id @default(cuid())
  accountId       String
  sessionId       String      @unique
  password        String
  firstName       String
  lastName        String
  gender          Gender      @default(UNKNOWN)
  userType        UserType    @default(CHILD)
  age             Int?
  grade           String?
  country         String?
  timezone        String?
  preferences     Json?
  isActive        Boolean     @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  totalConnectionDurationMs BigInt @default(0)
  currentSessionStartTime DateTime?
  
  // Relations
  account         Account     @relation(fields: [accountId], references: [id])
  activities      Activity[]
  conversations   Conversation[]
  profile         UserProfile?
  userInteractions UserInteraction[]
  userPrompts     UserPrompt[]
  navigationSessions NavigationSession[]
  performanceMetrics PerformanceMetric[]
}

// Profil détaillé de l'utilisateur
model UserProfile {
  id                    String      @id @default(cuid())
  userSessionId         String      @unique
  learningGoals         String[]
  preferredSubjects     String[]
  learningStyle         String?
  difficulty            String?
  sessionPreferences    Json?
  interests            String[]
  specialNeeds         String[]
  customNotes          String?
  parentWishes         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  
  // Relations
  userSession          UserSession  @relation(fields: [userSessionId], references: [id])
}

// Activités d'apprentissage
model Activity {
  id         String      @id @default(cuid())
  userSessionId String
  domain     String
  nodeKey    String
  score      Int?
  attempts   Int         @default(1)
  durationMs Int?
  createdAt  DateTime    @default(now())
  
  // Relations
  userSession UserSession @relation(fields: [userSessionId], references: [id])
}

// Conversations avec l'IA
model Conversation {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  message         String
  response        String
  focus           String?
  context         Json?
  metadata        Json?
  createdAt       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Historique de facturation
model BillingRecord {
  id          String      @id @default(cuid())
  accountId   String
  amount      Float
  currency    String      @default("EUR")
  description String
  status      BillingStatus @default(PENDING)
  billingDate DateTime    @default(now())
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime    @default(now())
  
  // Relations
  account     Account     @relation(fields: [accountId], references: [id])
}

// Limites du plan par compte (1-1)
model PlanSeat {
  id          String   @id @default(cuid())
  accountId   String   @unique
  maxChildren Int

  // Relation vers le compte
  account     Account  @relation(fields: [accountId], references: [id])
}

// Interactions utilisateur (clicks, inputs, navigation)
model UserInteraction {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  interactionType InteractionType
  elementType     ElementType
  elementId       String?
  elementName     String?
  elementValue    String?
  pageUrl         String?
  pageTitle       String?
  timestamp       DateTime    @default(now())
  metadata        Json?
  sessionDuration Int?        // Durée de session en ms au moment de l'interaction
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Prompts et inputs utilisateur
model UserPrompt {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  promptType      PromptType
  content         String
  context         Json?
  response        String?
  responseTime    Int?        // Temps de réponse en ms
  tokensUsed      Int?
  modelUsed       String?
  success         Boolean     @default(true)
  errorMessage    String?
  timestamp       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Sessions de navigation
model NavigationSession {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  startTime       DateTime    @default(now())
  endTime         DateTime?
  duration        Int?        // Durée en ms
  pagesVisited    String[]    // URLs visitées
  actionsPerformed Int        @default(0)
  sessionData     Json?
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Métriques de performance
model PerformanceMetric {
  id              String      @id @default(cuid())
  userSessionId   String
  accountId       String
  metricType      MetricType
  value           Float
  unit            String?
  context         Json?
  timestamp       DateTime    @default(now())
  
  // Relations
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
  account         Account     @relation(fields: [accountId], references: [id])
}

// Enums pour les nouveaux modèles
enum InteractionType {
  CLICK
  INPUT
  SUBMIT
  NAVIGATION
  SCROLL
  HOVER
  FOCUS
  BLUR
  KEYPRESS
  MOUSE_MOVE
  TOUCH
  GESTURE
  VOICE
  OTHER
}

enum ElementType {
  BUTTON
  INPUT
  TEXTAREA
  SELECT
  CHECKBOX
  RADIO
  LINK
  TAB
  CARD
  MODAL
  SIDEBAR
  HEADER
  FOOTER
  NAVIGATION
  FORM
  CHAT_INPUT
  AI_RESPONSE
  EXERCISE
  GAME
  VIDEO
  AUDIO
  IMAGE
  OTHER
}

enum PromptType {
  CHAT_MESSAGE
  EXERCISE_QUESTION
  AI_ASSISTANCE
  SEARCH
  FILTER
  SORT
  EXPORT
  IMPORT
  SETTINGS
  FEEDBACK
  SUPPORT
  OTHER
}

enum MetricType {
  LOAD_TIME
  RESPONSE_TIME
  CLICK_RATE
  CONVERSION_RATE
  ENGAGEMENT_TIME
  ERROR_RATE
  SUCCESS_RATE
  SATISFACTION_SCORE
  USAGE_FREQUENCY
  FEATURE_USAGE
  OTHER
}

// Enums existants
enum SubscriptionType {
  FREE
  PRO
  PRO_PLUS
  ENTERPRISE
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum UserType {
  PARENT
  CHILD
  TEACHER
  ADMIN
}

enum BillingStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
  OVERDUE
}
