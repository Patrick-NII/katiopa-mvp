generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                               String                 @id @default(cuid())
  email                            String                 @unique
  subscriptionType                 SubscriptionType       @default(FREE)
  maxSessions                      Int                    @default(2)
  isActive                         Boolean                @default(true)
  createdAt                        DateTime               @default(now())
  updatedAt                        DateTime               @updatedAt
  totalAccountConnectionDurationMs BigInt                 @default(0)
  billingHistory                   BillingRecord[]
  conversations                    Conversation[]
  planSeat                         PlanSeat?
  userSessions                     UserSession[]
  cubeai_conversations             cubeai_conversations[]
  cubeai_exercises                 cubeai_exercises[]
  parentPrompts                    ParentPrompt[]
  report_preferences               report_preferences?
  user_sessions                    user_sessions[]
}

model UserSession {
  id                        String                     @id @default(cuid())
  accountId                 String
  sessionId                 String                     @unique
  password                  String
  firstName                 String
  lastName                  String
  gender                    Gender                     @default(UNKNOWN)
  userType                  UserType                   @default(CHILD)
  age                       Int?
  grade                     String?
  country                   String?
  timezone                  String?
  preferences               Json?
  isActive                  Boolean                    @default(true)
  lastLoginAt               DateTime?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  totalConnectionDurationMs BigInt                     @default(0)
  currentSessionStartTime   DateTime?
  AIAnalysis                AIAnalysis[]
  activities                Activity[]
  ChildActivity             ChildActivity[]
  conversations             Conversation[]
  LearningSession           LearningSession[]
  navigationSessions        NavigationSession[]
  ParentPreferences         ParentPreferences?
  passwordResetTokens       PasswordResetToken[]
  performanceMetrics        PerformanceMetric[]
  userInteractions          UserInteraction[]
  profile                   UserProfile?
  userPrompts               UserPrompt[]
  account                   Account                    @relation(fields: [accountId], references: [id])
  cubeai_conversations      cubeai_conversations[]
  cubeai_exercises          cubeai_exercises[]
  cubematch_insights        cubematch_insights?
  cubematch_operator_stats  cubematch_operator_stats[]
  CubeMatchScore            CubeMatchScore[]
  cubematch_sessions        cubematch_sessions[]
  CubeMatchUserStats        CubeMatchUserStats?
  childPrompts              ParentPrompt[]             @relation("ChildPrompts")
  parentPrompts             ParentPrompt[]             @relation("ParentPrompts")
}

model UserProfile {
  id                 String      @id @default(cuid())
  userSessionId      String      @unique
  learningGoals      String[]
  preferredSubjects  String[]
  learningStyle      String?
  difficulty         String?
  sessionPreferences Json?
  interests          String[]
  specialNeeds       String[]
  customNotes        String?
  parentWishes       String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
  userSession        UserSession @relation(fields: [userSessionId], references: [id])
}

model Activity {
  id            String      @id @default(cuid())
  userSessionId String
  domain        String
  nodeKey       String
  score         Int?
  attempts      Int         @default(1)
  durationMs    Int?
  createdAt     DateTime    @default(now())
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model Conversation {
  id            String      @id @default(cuid())
  userSessionId String
  accountId     String
  message       String
  response      String
  focus         String?
  context       Json?
  metadata      Json?
  createdAt     DateTime    @default(now())
  account       Account     @relation(fields: [accountId], references: [id])
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model PasswordResetToken {
  id            String      @id @default(cuid())
  token         String      @unique
  userSessionId String
  expiresAt     DateTime
  createdAt     DateTime    @default(now())
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model BillingRecord {
  id            String        @id @default(cuid())
  accountId     String
  amount        Float
  currency      String        @default("EUR")
  description   String?
  status        BillingStatus @default(PENDING)
  dueDate       DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  invoiceNumber String?
  account       Account       @relation(fields: [accountId], references: [id])
}

model PlanSeat {
  id         String   @id @default(cuid())
  accountId  String   @unique
  createdAt  DateTime @default(now())
  isActive   Boolean  @default(true)
  seatNumber Int
  account    Account  @relation(fields: [accountId], references: [id])
}

model UserInteraction {
  id              String      @id @default(cuid())
  userSessionId   String
  timestamp       DateTime    @default(now())
  data            Json?
  interactionType String
  userSession     UserSession @relation(fields: [userSessionId], references: [id])
}

model UserPrompt {
  id            String      @id @default(cuid())
  userSessionId String
  response      String?
  createdAt     DateTime    @default(now())
  metadata      Json?
  prompt        String
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model NavigationSession {
  id            String      @id @default(cuid())
  userSessionId String
  startTime     DateTime    @default(now())
  endTime       DateTime?
  pages         Json?
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model PerformanceMetric {
  id            String      @id @default(cuid())
  userSessionId String
  value         Float
  timestamp     DateTime    @default(now())
  metricType    String
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model CubeMatchScore {
  id                               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                          String      @map("user_id")
  username                         String      @db.VarChar(255)
  score                            Int
  level                            Int
  time_played_ms                   BigInt      @map("time_played_ms")
  operator                         String      @db.VarChar(10)
  target                           Int
  allow_diagonals                  Boolean     @default(false) @map("allow_diagonals")
  grid_size_rows                   Int         @default(8)
  grid_size_cols                   Int         @default(8)
  max_size                         Int         @default(9)
  spawn_rate_min                   Int         @default(2)
  spawn_rate_max                   Int         @default(4)
  tick_ms                          Int         @default(4000)
  combo_max                        Int         @default(0)
  cells_cleared                    Int         @default(0)
  hints_used                       Int         @default(0)
  game_duration_seconds            Int         @default(0)
  created_at                       DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at                       DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  game_mode                        String?     @default("classic") @db.VarChar(20)
  difficulty_level                 String?     @default("normal") @db.VarChar(10)
  total_moves                      Int?        @default(0)
  successful_moves                 Int?        @default(0)
  failed_moves                     Int?        @default(0)
  accuracy_rate                    Decimal?    @default(0) @db.Decimal(5, 2)
  average_move_time_ms             Decimal?    @default(0) @db.Decimal(10, 2)
  fastest_move_time_ms             Int?        @default(0)
  slowest_move_time_ms             Int?        @default(0)
  additions_count                  Int?        @default(0)
  subtractions_count               Int?        @default(0)
  multiplications_count            Int?        @default(0)
  divisions_count                  Int?        @default(0)
  additions_score                  Int?        @default(0)
  subtractions_score               Int?        @default(0)
  multiplications_score            Int?        @default(0)
  divisions_score                  Int?        @default(0)
  grid_completion_rate             Decimal?    @default(0) @db.Decimal(5, 2)
  max_consecutive_hits             Int?        @default(0)
  max_consecutive_misses           Int?        @default(0)
  longest_combo_chain              Int?        @default(0)
  target_numbers_used              String?     @default("[]")
  operator_sequence                String?     @default("[]")
  time_spent_on_additions_ms       BigInt?     @default(0)
  time_spent_on_subtractions_ms    BigInt?     @default(0)
  time_spent_on_multiplications_ms BigInt?     @default(0)
  time_spent_on_divisions_ms       BigInt?     @default(0)
  session_start_time               DateTime?   @db.Timestamptz(6)
  session_end_time                 DateTime?   @db.Timestamptz(6)
  breaks_taken                     Int?        @default(0)
  total_break_time_ms              BigInt?     @default(0)
  engagement_score                 Decimal?    @default(0) @db.Decimal(5, 2)
  focus_time_percentage            Decimal?    @default(0) @db.Decimal(5, 2)
  difficulty_adjustments           Int?        @default(0)
  theme_used                       String?     @default("classic") @db.VarChar(20)
  sound_enabled                    Boolean?    @default(true)
  assist_enabled                   Boolean?    @default(true)
  hints_enabled                    Boolean?    @default(true)
  userSession                      UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([accuracy_rate(sort: Desc)], map: "idx_cubematch_scores_accuracy")
  @@index([created_at(sort: Desc)], map: "idx_cubematch_scores_created_at")
  @@index([difficulty_level], map: "idx_cubematch_scores_difficulty")
  @@index([game_mode], map: "idx_cubematch_scores_game_mode")
  @@index([level(sort: Desc)], map: "idx_cubematch_scores_level")
  @@index([operator], map: "idx_cubematch_scores_operator")
  @@index([score(sort: Desc)], map: "idx_cubematch_scores_score")
  @@index([session_start_time], map: "idx_cubematch_scores_session_start")
  @@index([user_id], map: "idx_cubematch_scores_user_id")
  @@map("cubematch_scores")
}

model CubeMatchStats {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  total_games         BigInt    @default(0)
  total_score         BigInt    @default(0)
  average_score       Decimal   @default(0) @db.Decimal(10, 2)
  best_score          Int       @default(0)
  total_time_played   BigInt    @default(0)
  average_time_played Decimal   @default(0) @db.Decimal(10, 2)
  highest_level       Int       @default(1)
  total_players       Int       @default(0)
  average_level       Decimal   @default(1) @db.Decimal(5, 2)
  most_used_operator  String    @default("ADD") @db.VarChar(10)
  last_updated        DateTime? @default(now()) @db.Timestamptz(6)

  @@map("cubematch_stats")
}

model CubeMatchUserStats {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String      @unique @map("user_id")
  username            String      @db.VarChar(255)
  total_games         Int         @default(0)
  total_score         BigInt      @default(0)
  best_score          Int         @default(0)
  average_score       Decimal     @default(0) @db.Decimal(10, 2)
  highest_level       Int         @default(1)
  total_time_played   BigInt      @default(0)
  average_time_played Decimal     @default(0) @db.Decimal(10, 2)
  total_combo_max     Int         @default(0)
  total_cells_cleared Int         @default(0)
  total_hints_used    Int         @default(0)
  favorite_operator   String      @default("ADD") @db.VarChar(10)
  last_played         DateTime?   @default(now()) @db.Timestamptz(6)
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?   @default(now()) @updatedAt @db.Timestamptz(6)
  userSession         UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([best_score(sort: Desc)], map: "idx_cubematch_user_stats_best_score")
  @@index([total_score(sort: Desc)], map: "idx_cubematch_user_stats_total_score")
  @@index([user_id], map: "idx_cubematch_user_stats_user_id")
  @@map("cubematch_user_stats")
}

model ParentPrompt {
  id               String       @id @default(cuid())
  content          String
  processedContent String?
  aiResponse       String?
  promptType       String       @default("PARENT_NOTES")
  status           PromptStatus @default(PENDING)
  parentSessionId  String       @map("parent_session_id")
  childSessionId   String       @map("child_session_id")
  accountId        String       @map("account_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  account          Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  childSession     UserSession  @relation("ChildPrompts", fields: [childSessionId], references: [id], onDelete: Cascade)
  parentSession    UserSession  @relation("ParentPrompts", fields: [parentSessionId], references: [id], onDelete: Cascade)

  @@map("parent_prompts")
}

model AIAnalysis {
  id            String      @id
  userSessionId String
  analysisType  String
  content       String
  prompt        String
  context       Json
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  UserSession   UserSession @relation(fields: [userSessionId], references: [id])
}

model ChildActivity {
  id                String           @id
  sessionId         String
  type              String
  title             String
  score             Int
  duration          Int
  difficulty        String
  completedAt       DateTime         @default(now())
  learningSessionId String?
  LearningSession   LearningSession? @relation(fields: [learningSessionId], references: [id])
  UserSession       UserSession      @relation(fields: [sessionId], references: [id])
}

model LearningSession {
  id             String          @id
  userSessionId  String
  startTime      DateTime        @default(now())
  endTime        DateTime?
  duration       Int
  breaks         Int             @default(0)
  completionRate Float           @default(100.0)
  mood           String?
  notes          String?
  ChildActivity  ChildActivity[]
  UserSession    UserSession     @relation(fields: [userSessionId], references: [id])
}

model ParentPreferences {
  id                String      @id
  userSessionId     String      @unique
  childStrengths    String[]
  focusAreas        String[]
  learningGoals     String[]
  concerns          String[]
  preferredSchedule Json
  studyDuration     Int         @default(30)
  breakFrequency    Int         @default(15)
  learningStyle     String?
  motivationFactors String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime
  UserSession       UserSession @relation(fields: [userSessionId], references: [id])
}

model cubeai_conversations {
  id               String      @id
  user_message     String
  ai_response      String
  context          Json
  promptType       String      @default("GENERAL")
  difficulty       String      @default("MEDIUM")
  child_session_id String
  account_id       String
  created_at       DateTime    @default(now())
  Account          Account     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  UserSession      UserSession @relation(fields: [child_session_id], references: [id], onDelete: Cascade)
}

model cubeai_exercises {
  id               String      @id
  exercise_type    String
  difficulty       String      @default("MEDIUM")
  question         String
  options          String[]
  correct_answer   String
  explanation      String
  points           Int         @default(10)
  time_limit       Int         @default(60)
  context          Json
  child_session_id String
  account_id       String
  created_at       DateTime    @default(now())
  Account          Account     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  UserSession      UserSession @relation(fields: [child_session_id], references: [id], onDelete: Cascade)
}

model cubematch_insights {
  id                          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                     String      @unique
  strength_areas              String?     @default("[]")
  improvement_areas           String?     @default("[]")
  learning_patterns           String?     @default("[]")
  recommended_operators       String?     @default("[]")
  recommended_target_numbers  String?     @default("[]")
  recommended_grid_sizes      String?     @default("[]")
  recommended_difficulty      String?     @default("normal") @db.VarChar(10)
  progress_score              Decimal?    @default(0) @db.Decimal(5, 2)
  consistency_score           Decimal?    @default(0) @db.Decimal(5, 2)
  challenge_readiness         Decimal?    @default(0) @db.Decimal(5, 2)
  best_playing_hours          String?     @default("[]")
  optimal_session_duration_ms BigInt?     @default(0)
  recommended_break_frequency Int?        @default(0)
  last_analysis               DateTime?   @default(now()) @db.Timestamptz(6)
  created_at                  DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?   @default(now()) @db.Timestamptz(6)
  UserSession                 UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_cubematch_insights_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model cubematch_operator_stats {
  id                            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                       String
  operator                      String      @db.VarChar(10)
  total_games                   Int?        @default(0)
  total_score                   BigInt?     @default(0)
  best_score                    Int?        @default(0)
  average_score                 Decimal?    @default(0) @db.Decimal(10, 2)
  total_time_played_ms          BigInt?     @default(0)
  average_time_per_game_ms      Decimal?    @default(0) @db.Decimal(10, 2)
  total_moves                   Int?        @default(0)
  successful_moves              Int?        @default(0)
  failed_moves                  Int?        @default(0)
  accuracy_rate                 Decimal?    @default(0) @db.Decimal(5, 2)
  average_move_time_ms          Decimal?    @default(0) @db.Decimal(10, 2)
  average_level                 Decimal?    @default(1) @db.Decimal(5, 2)
  highest_level                 Int?        @default(1)
  favorite_target_numbers       String?     @default("[]")
  least_favorite_target_numbers String?     @default("[]")
  improvement_rate              Decimal?    @default(0) @db.Decimal(5, 2)
  last_played                   DateTime?   @default(now()) @db.Timestamptz(6)
  created_at                    DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?   @default(now()) @db.Timestamptz(6)
  UserSession                   UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, operator])
  @@index([user_id, operator], map: "idx_cubematch_operator_stats_user_operator")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model cubematch_sessions {
  id                        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                   String
  session_start             DateTime    @db.Timestamptz(6)
  session_end               DateTime?   @db.Timestamptz(6)
  total_games_played        Int?        @default(0)
  total_score               BigInt?     @default(0)
  total_time_played_ms      BigInt?     @default(0)
  average_games_per_hour    Decimal?    @default(0) @db.Decimal(10, 2)
  longest_game_duration_ms  Int?        @default(0)
  shortest_game_duration_ms Int?        @default(0)
  preferred_operators       String?     @default("[]")
  preferred_grid_sizes      String?     @default("[]")
  preferred_target_numbers  String?     @default("[]")
  engagement_level          String?     @default("medium") @db.VarChar(20)
  focus_breaks              Int?        @default(0)
  total_break_time_ms       BigInt?     @default(0)
  created_at                DateTime?   @default(now()) @db.Timestamptz(6)
  UserSession               UserSession @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, session_start(sort: Desc)], map: "idx_cubematch_sessions_user_start")
}

model daily_reports {
  id            String        @id
  session_id    String
  date          DateTime      @db.Date
  subject       String
  html_content  String
  text_content  String
  model_used    String
  prompt_used   String?
  kpis_snapshot Json
  sent_at       DateTime      @default(now())
  parent_email  String
  status        String        @default("sent")
  error_message String?
  created_at    DateTime      @default(now())
  user_sessions user_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model email_bounces {
  id            Int         @id @default(autoincrement())
  email_log_id  Int?
  email_address String
  bounce_type   BounceType
  reason        String?
  smtp_response String?
  received_at   DateTime    @default(now())
  email_logs    email_logs? @relation(fields: [email_log_id], references: [id])
}

model email_logs {
  id            Int             @id @default(autoincrement())
  email_type    EmailType
  from_email    String
  to_email      String
  subject       String
  html_content  String?
  text_content  String?
  status        EmailStatus     @default(PENDING)
  message_id    String?
  smtp_response String?
  error_message String?
  retry_count   Int             @default(0)
  scheduled_at  DateTime        @default(now())
  sent_at       DateTime?
  created_at    DateTime        @default(now())
  updated_at    DateTime
  email_bounces email_bounces[]
}

model email_statistics {
  id              Int       @id @default(autoincrement())
  email_type      EmailType
  date            DateTime  @db.Date
  sent_count      Int       @default(0)
  delivered_count Int       @default(0)
  failed_count    Int       @default(0)
  bounced_count   Int       @default(0)
  opened_count    Int       @default(0)
  clicked_count   Int       @default(0)
  created_at      DateTime  @default(now())
  updated_at      DateTime

  @@unique([email_type, date])
}

model email_templates {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  email_type       EmailType
  subject_template String
  html_template    String
  text_template    String?
  variables        Json      @default("{}")
  is_active        Boolean   @default(true)
  version          Int       @default(1)
  created_at       DateTime  @default(now())
  updated_at       DateTime
}

model incoming_emails {
  id          Int                 @id @default(autoincrement())
  from_email  String
  to_email    String
  subject     String?
  body        String?
  headers     Json?
  message_id  String?
  email_type  IncomingEmailType   @default(SUPPORT)
  priority    EmailPriority       @default(NORMAL)
  status      IncomingEmailStatus @default(NEW)
  assigned_to String?
  ticket_id   String?
  tags        String[]
  created_at  DateTime            @default(now())
  updated_at  DateTime
}

model learning_events {
  id            String        @id
  session_id    String
  ts            DateTime      @default(now())
  domain        String
  activity      String
  duration_sec  Int
  success_ratio Float?
  metadata      Json          @default("{}")
  created_at    DateTime      @default(now())
  user_sessions user_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model quiz_results {
  id            String        @id
  session_id    String
  ts            DateTime      @default(now())
  module        String
  score         Float
  attempts      Int           @default(1)
  time_sec      Int
  created_at    DateTime      @default(now())
  user_sessions user_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model report_preferences {
  id             String   @id
  account_id     String   @unique
  frequency      String   @default("daily")
  preferred_time String   @default("19:30:00")
  domains        String[] @default(["maths", "programmation", "playcube"])
  include_goals  Boolean  @default(true)
  include_advice Boolean  @default(true)
  include_stats  Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime
  Account        Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
}

model session_stats_daily {
  session_id        String
  date              DateTime      @db.Date
  total_time_min    Int           @default(0)
  kpi_assiduite     Float         @default(0)
  kpi_comprehension Float         @default(0)
  kpi_progression   Float         @default(0)
  sessions_count    Int           @default(0)
  best_module       String?
  needs_help        String?
  consecutive_days  Int           @default(0)
  focus_score       Float         @default(0)
  created_at        DateTime      @default(now())
  updated_at        DateTime
  user_sessions     user_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@id([session_id, date])
}

model user_sessions {
  id                  String                @id
  account_id          String
  child_nickname      String
  child_age           Int
  parent_email        String
  goals               Json                  @default("{}")
  consent_email       Boolean               @default(true)
  email_frequency     String                @default("daily")
  email_time          String                @default("19:30:00")
  email_domains       String[]              @default(["maths", "programmation", "playcube"])
  created_at          DateTime              @default(now())
  updated_at          DateTime
  daily_reports       daily_reports[]
  learning_events     learning_events[]
  quiz_results        quiz_results[]
  session_stats_daily session_stats_daily[]
  Account             Account               @relation(fields: [account_id], references: [id])
}

enum SubscriptionType {
  FREE
  PRO
  PRO_PLUS
  ENTERPRISE
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum UserType {
  CHILD
  PARENT
  TEACHER
  ADMIN
}

enum BillingStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  FAILED
}

enum PromptStatus {
  PENDING
  PROCESSED
  ERROR
}

enum BounceType {
  HARD
  SOFT
  COMPLAINT
}

enum EmailPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum EmailType {
  HELLO
  SUPPORT
  NOREPLY
}

enum IncomingEmailStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IncomingEmailType {
  SUPPORT
  HELLO
  GENERAL
}
