import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const authToken = cookieStore.get('authToken')?.value;

    if (!authToken) {
      return NextResponse.json({ error: 'Non authentifi√©' }, { status: 401 });
    }

    // √âTAPE 1: V√©rification d'authentification
    console.log('üîê √âTAPE 1: V√©rification d\'authentification...');
    
    const decoded = jwt.verify(authToken, process.env.JWT_SECRET!) as any;
    if (!decoded || decoded.userType !== 'PARENT') {
      return NextResponse.json({ error: 'Acc√®s non autoris√© - Seuls les parents peuvent utiliser Bubix' }, { status: 403 });
    }

    console.log('‚úÖ √âTAPE 1 TERMIN√âE: Authentification valid√©e');

    const { prompt, sessionId, analysisType, context } = await request.json();

    if (!prompt || !sessionId || !analysisType) {
      return NextResponse.json({ error: 'Param√®tres manquants' }, { status: 400 });
    }

    // √âTAPE 2: R√©cup√©ration des vraies donn√©es de la session
    console.log('üë∂ √âTAPE 2: R√©cup√©ration des donn√©es r√©elles de la session...');
    
    // V√©rifier que la session appartient bien au parent
    const session = await prisma.userSession.findFirst({
      where: {
        id: sessionId,
        accountId: decoded.accountId
      },
      include: {
        account: true,
        activities: true,
        cubeMatchScores: true
      }
    });

    if (!session) {
      return NextResponse.json({ 
        error: 'Session non trouv√©e ou acc√®s non autoris√©',
        details: `Session ${sessionId} non accessible pour le compte ${decoded.accountId}`
      }, { status: 404 });
    }

    // R√©cup√©rer les donn√©es de l'enfant associ√© √† cette session
    // Si c'est une session enfant, utiliser directement cette session
    // Si c'est une session parent, r√©cup√©rer un enfant du m√™me compte
    let child;
    if (session.userType === 'CHILD') {
      child = session;
    } else {
      // C'est une session parent, r√©cup√©rer un enfant du m√™me compte
      child = await prisma.userSession.findFirst({
        where: {
          accountId: decoded.accountId,
          userType: 'CHILD',
          isActive: true
        }
      });
    }
    
    if (!child) {
      return NextResponse.json({ 
        error: 'Enfant non trouv√© pour cette session',
        details: `Aucun enfant trouv√© pour la session ${sessionId}`
      }, { status: 404 });
    }

    // Calculer les statistiques r√©elles
    const activities = child.activities || [];
    const cubeMatchScores = child.cubeMatchScores || [];
    const totalActivities = activities.length;
    const totalTime = activities.reduce((sum, activity) => sum + (activity.durationMs || 0), 0);
    
    // Calculer le score moyen (combinaison des activit√©s et des scores CubeMatch)
    const activityScores = activities.map(activity => activity.score).filter(Boolean);
    const cubeMatchScoreValues = cubeMatchScores.map(score => score.score).filter(Boolean);
    const allScores = [...activityScores, ...cubeMatchScoreValues];
    const averageScore = allScores.length > 0 ? allScores.reduce((sum, score) => sum + score, 0) / allScores.length : 0;

    // Extraire les domaines uniques
    const domains = [...new Set(activities.map(activity => activity.domain).filter(Boolean))];

    // Pr√©parer les activit√©s r√©centes avec vraies donn√©es
    const recentActivities = activities.slice(-5).map(activity => {
      return {
        domain: activity.domain || 'Non sp√©cifi√©',
        score: activity.score || 0,
        duration: activity.durationMs || 0,
        date: activity.createdAt
      };
    });

    const childData = {
      name: `${child.firstName} ${child.lastName}`,
      age: child.age,
      grade: child.grade || 'Non sp√©cifi√©',
      totalActivities,
      averageScore: Math.round(averageScore * 100) / 100,
      totalTime,
      domains,
      recentActivities,
      sessionId: child.id,
      sessionStartTime: child.currentSessionStartTime,
      sessionEndTime: child.lastLoginAt
    };

    console.log('‚úÖ √âTAPE 2 TERMIN√âE: Donn√©es r√©elles r√©cup√©r√©es', {
      childName: childData.name,
      totalActivities: childData.totalActivities,
      averageScore: childData.averageScore,
      domains: childData.domains
    });

    // √âTAPE 3: Traitement par l'IA
    console.log('ü§ñ √âTAPE 3: Traitement par l\'IA...');
    
    const enrichedPrompt = `
Tu es Bubix, l'assistant IA √©ducatif de CubeAI. 

‚ö†Ô∏è DONN√âES STRICTEMENT V√âRIFI√âES ET R√âELLES ‚ö†Ô∏è
- Nom complet de l'enfant : ${childData.name}
- √Çge : ${childData.age} ans
- Classe : ${childData.grade}
- Nombre total d'activit√©s dans cette session : ${childData.totalActivities}
- Score moyen calcul√© : ${childData.averageScore.toFixed(1)}%
- Temps total d'apprentissage : ${Math.round(childData.totalTime / (1000 * 60))} minutes
- Domaines √©tudi√©s dans cette session : ${childData.domains.length > 0 ? childData.domains.join(', ') : 'Aucun domaine sp√©cifique'}
- Activit√©s r√©centes avec scores r√©els : ${childData.recentActivities.length > 0 ? childData.recentActivities.map(a => `${a.domain} (${a.score}%)`).join(', ') : 'Aucune activit√© r√©cente'}

INFORMATIONS DE S√âCURIT√â :
- Type d'analyse demand√©e : ${analysisType}
- Plan d'abonnement : ${context?.subscriptionType || 'FREE'}
- Timestamp de la session : ${childData.sessionStartTime ? new Date(childData.sessionStartTime).toLocaleString('fr-FR') : 'Non disponible'}

PROMPT UTILISATEUR :
${prompt}

üö® R√àGLES CRITIQUES DE S√âCURIT√â üö®
1. Utilise EXCLUSIVEMENT les donn√©es r√©elles fournies ci-dessus
2. Ne mentionne JAMAIS d'informations non pr√©sentes dans ces donn√©es
3. Si une donn√©e n'est pas disponible, indique clairement "Donn√©e non disponible"
4. Ne m√©lange JAMAIS les donn√©es de diff√©rents enfants ou sessions
5. V√©rifie que le nom de l'enfant correspond exactement √† ${childData.name}
6. Si les donn√©es sont insuffisantes, propose des recommandations g√©n√©rales sans inventer de d√©tails
7. Structure ta r√©ponse de mani√®re claire et professionnelle
8. Termine TOUJOURS par ta signature : "Cordialement, Bubix, Assistant IA √âducatif CubeAI"

R√©ponds maintenant en respectant strictement ces r√®gles :
`;

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: context?.subscriptionType === 'FREE' ? 'gpt-3.5-turbo' : 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `Tu es Bubix, l'assistant IA √©ducatif de CubeAI. 

üö® R√àGLES CRITIQUES DE S√âCURIT√â üö®
- Tu utilises EXCLUSIVEMENT les donn√©es r√©elles fournies dans le prompt utilisateur
- Tu ne mentionnes JAMAIS d'informations non pr√©sentes dans ces donn√©es
- Tu ne m√©langes JAMAIS les donn√©es de diff√©rents enfants ou sessions
- Tu v√©rifies toujours que le nom correspond exactement
- Si une donn√©e n'est pas disponible, tu indiques clairement "Donn√©e non disponible"
- Tu termines TOUJOURS par ta signature : "Cordialement, Bubix, Assistant IA √âducatif CubeAI"

Tu es bienveillant, professionnel et constructif, mais tu respectes strictement ces r√®gles de s√©curit√©.`
          },
          {
            role: 'user',
            content: enrichedPrompt
          }
        ],
        max_tokens: context?.subscriptionType === 'FREE' ? 500 : 1000,
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      throw new Error('Erreur lors de l\'appel √† OpenAI');
    }

    const openaiData = await openaiResponse.json();
    const bubixResponse = openaiData.choices[0]?.message?.content || 'Aucune r√©ponse g√©n√©r√©e';

    console.log('‚úÖ √âTAPE 3 TERMIN√âE: Analyse IA g√©n√©r√©e');

    return NextResponse.json({
      success: true,
      response: bubixResponse,
      analysisType,
      sessionId,
      childName: childData.name,
      timestamp: new Date().toISOString(),
      dataUsed: {
        totalActivities: childData.totalActivities,
        averageScore: childData.averageScore,
        totalTimeMinutes: Math.round(childData.totalTime / (1000 * 60)),
        domains: childData.domains,
        recentActivities: childData.recentActivities,
        sessionStartTime: childData.sessionStartTime,
        sessionEndTime: childData.sessionEndTime
      },
      securityInfo: {
        parentVerified: true,
        childVerified: true,
        accountId: decoded.accountId,
        parentEmail: decoded.email,
        childId: child.id,
        verificationTimestamp: new Date().toISOString(),
        dataSource: 'database_real_data',
        hallucinationPrevention: 'enabled',
        crossSessionProtection: 'active'
      }
    });

  } catch (error) {
    console.error('Erreur API Bubix:', error);
    return NextResponse.json({
      error: 'Erreur lors de l\'analyse par Bubix',
      details: error instanceof Error ? error.message : 'Erreur inconnue',
      securityInfo: {
        errorType: error instanceof Error ? error.constructor.name : 'Unknown',
        timestamp: new Date().toISOString(),
        dataSource: 'error_state'
      }
    }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}