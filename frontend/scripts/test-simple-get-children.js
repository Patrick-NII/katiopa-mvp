// Test simple de la fonction getChildrenData corrig√©e
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testSimpleGetChildrenData() {
  console.log('üß™ Test simple de getChildrenData corrig√©e...')
  
  try {
    // R√©cup√©rer le parent de test
    const parent = await prisma.userSession.findFirst({
      where: {
        userType: 'PARENT',
        isActive: true
      }
    })
    
    if (!parent) {
      console.log('‚ùå Aucun parent trouv√©')
      return
    }
    
    console.log('‚úÖ Parent trouv√©:', parent.firstName, parent.lastName)
    console.log('üè† AccountId:', parent.accountId)
    
    // Test de la fonction getChildrenData simplifi√©e
    const children = await prisma.userSession.findMany({
      where: {
        accountId: parent.accountId,
        userType: 'CHILD',
        isActive: true
      },
      include: {
        activities: {
          orderBy: { createdAt: 'desc' },
          take: 100
        },
        profile: true
      }
    })

    console.log('üìä Enfants trouv√©s:', children.length)
    
    if (children.length > 0) {
      children.forEach((child, index) => {
        console.log(`\nüë∂ Enfant ${index + 1}: ${child.firstName} ${child.lastName}`)
        console.log(`   √Çge: ${child.age}`)
        console.log(`   Activit√©s: ${child.activities.length}`)
        
        if (child.activities.length > 0) {
          console.log('   Derni√®res activit√©s:')
          child.activities.slice(0, 3).forEach(activity => {
            console.log(`     - ${activity.domain}: ${activity.nodeKey} (${activity.score}/100)`)
          })
        }
      })
      
      console.log('\n‚úÖ Test r√©ussi ! Les donn√©es sont accessibles.')
      
    } else {
      console.log('‚ùå Aucune donn√©e d\'enfant r√©cup√©r√©e')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le test
testSimpleGetChildrenData()
