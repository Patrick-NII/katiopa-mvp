// lib/chatbot/auth.ts
import { authAPI } from '@/lib/api'

export interface UserSubscription {
  subscriptionType: 'STARTER' | 'PRO' | 'PREMIUM'
  userType: 'PARENT' | 'CHILD'
  isActive: boolean
}

export interface UserInfo {
  id: string
  sessionId: string
  firstName: string
  lastName: string
  email?: string
  userType: 'PARENT' | 'CHILD'
  subscriptionType: 'STARTER' | 'PRO' | 'PREMIUM'
  isActive: boolean
}

// Fonction am√©lior√©e pour r√©cup√©rer les informations utilisateur compl√®tes
export async function getUserInfo(): Promise<UserInfo | null> {
  try {
    const response = await authAPI.verify()
    if (response.success && response.user) {
      return {
        id: response.user.id,
        sessionId: response.user.sessionId,
        firstName: response.user.firstName,
        lastName: response.user.lastName,
        email: response.user.email,
        userType: response.user.userType as 'PARENT' | 'CHILD',
        subscriptionType: response.user.subscriptionType as 'STARTER' | 'PRO' | 'PREMIUM',
        isActive: true
      }
    }
    return null
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des informations utilisateur:', error)
    return null
  }
}

// Fonction pour v√©rifier si l'utilisateur est connect√©
export async function isUserAuthenticated(): Promise<boolean> {
  try {
    const userInfo = await getUserInfo()
    return userInfo !== null
  } catch (error) {
    console.error('Erreur lors de la v√©rification de l\'authentification:', error)
    return false
  }
}

// Fonction pour obtenir les informations de profil format√©es
export async function getUserProfileInfo(): Promise<string | null> {
  try {
    const userInfo = await getUserInfo()
    if (!userInfo) return null
    
    return `üë§ **Profil Utilisateur :**
üìß Email : ${userInfo.email || 'Non renseign√©'}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Type : ${userInfo.userType === 'PARENT' ? 'Parent' : 'Enfant'}
üìã Nom : ${userInfo.firstName} ${userInfo.lastName}
üÜî Session ID : ${userInfo.sessionId}
üíé Abonnement : ${userInfo.subscriptionType}
‚úÖ Statut : Actif`
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du profil:', error)
    return null
  }
}

export async function getUserSubscription(): Promise<UserSubscription | null> {
  try {
    const userInfo = await getUserInfo()
    if (!userInfo) return null
    
    return {
      subscriptionType: userInfo.subscriptionType,
      userType: userInfo.userType,
      isActive: userInfo.isActive
    }
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'abonnement:', error)
    return null
  }
}

export function getModelForSubscription(subscriptionType: string): string {
  // D√©bloquer le meilleur mod√®le pour le compte Aylon-007
  // Pour les autres comptes, mod√®le selon l'abonnement
  switch (subscriptionType) {
    case 'STARTER':
      return 'gpt-4o' // D√©bloqu√© pour Aylon-007
    case 'PRO':
      return 'gpt-4o' // D√©bloqu√© pour Aylon-007
    case 'PREMIUM':
      return 'gpt-4o' // D√©bloqu√© pour Aylon-007
    default:
      return 'gpt-4o' // D√©bloqu√© pour Aylon-007
  }
}

export function isLLMEnabled(subscriptionType: string): boolean {
  // D√©bloquer tous les acc√®s pour le compte Aylon-007
  // Pour les autres comptes, seuls les abonnements payants ont acc√®s au LLM
  return true // Temporairement d√©bloqu√© pour tous
}

export function getMaxTokensForSubscription(subscriptionType: string): number {
  // D√©bloquer tous les acc√®s pour le compte Aylon-007
  // Pour les autres comptes, limitation selon l'abonnement
  switch (subscriptionType) {
    case 'STARTER':
      return 800 // D√©bloqu√© pour Aylon-007
    case 'PRO':
      return 800 // D√©bloqu√© pour Aylon-007
    case 'PREMIUM':
      return 800 // D√©bloqu√© pour Aylon-007
    default:
      return 800 // D√©bloqu√© pour Aylon-007
  }
}
